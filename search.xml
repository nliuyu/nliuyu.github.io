<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>针对JAVA期末课设的学习记录</title>
    <url>/posts/a425977c.html</url>
    <content><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul>
<li><h4 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h4><p>[vue的学习记录(更新中)](<a href="https://www.liuyu.biz/posts/708b490e.html">开启VUE的学习记录 | 刘宇的个人博客</a>)</p>
</li>
<li><h3 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h3></li>
<li><h3 id="bootstrap5"><a href="#bootstrap5" class="headerlink" title="bootstrap5"></a>bootstrap5</h3></li>
<li><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3></li>
</ul>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul>
<li><h3 id="springboot2"><a href="#springboot2" class="headerlink" title="springboot2"></a>springboot2</h3><p><a href="">SpringBoot的学习记录</a></p>
</li>
<li><h3 id="mybatis-plus"><a href="#mybatis-plus" class="headerlink" title="mybatis-plus"></a>mybatis-plus</h3></li>
<li><h3 id="Gson"><a href="#Gson" class="headerlink" title="Gson"></a>Gson</h3></li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3></li>
</ul>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul>
<li><h3 id="社区版idea"><a href="#社区版idea" class="headerlink" title="社区版idea"></a>社区版idea</h3></li>
<li><h3 id="vs-code"><a href="#vs-code" class="headerlink" title="vs code"></a>vs code</h3></li>
</ul>
<h2 id="实现后端增删改查"><a href="#实现后端增删改查" class="headerlink" title="实现后端增删改查"></a>实现后端增删改查</h2><p>   首先我们新建一个文件夹，通过cmd输入命令<code> vue create front</code>(为前端项目命名为”front”)，选择vue2。在创建vue的同时，我们可以在这段时间创建数据库，登陆msql之后，source + 数据库的路径可以将之前设计好的数据库拖过来。</p>
<p>  之后我们打开Idea,选择new project - &gt; 点击next- &gt; 选择Maven - &gt;  选择新建的文件夹路径\back(为前端项目命名为”back”)</p>
<p>  在maven的pom.xml文件中引入依赖后刷新maven</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis_plus01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  在source下创建一个文件（file）,重命名为”application.yaml”</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">'123456'</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/demo3<span class="token punctuation">?</span>characterEncoding=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone=UTC</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  写法很固定，username和password分别是用户名和密码（注意打上单引号），url中加上数据库。</p>
<p>  接下来在java下新建一个包”org.example.Application”，最后就会创建出一个Application类作为启动类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"org.example.mapper"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  新建一个Student类，通过Navicat的设计表查看（也可以在cmd中输入命令”desc+表名”查看）有哪些属性，类型需要一一匹配。通过lombok可以帮助我们快速生成构造方法、toString方法等等。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> date<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> num1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> num2<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> num3<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> num4<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  在mapper包下创建一个StudentMapper接口</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  创建Controller类配置路由规则，Gson可以将查出来的数据转成字符串，这个时候会有警告，在上方加上@SuppressWarnings(“all”)</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span></span><span class="token class-name">Gson</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">StudentMapper</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StudentMapper</span> studentMapper<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Gson</span> gson<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/students"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">{</span>
        studentMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeStudent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">{</span>
        studentMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateStudent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">{</span>
        studentMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="以下都是零碎的知识点记录，我会在考完后的6月25日晚整理好后更新的，图片未上传图床所以没有加载出来，"><a href="#以下都是零碎的知识点记录，我会在考完后的6月25日晚整理好后更新的，图片未上传图床所以没有加载出来，" class="headerlink" title="(以下都是零碎的知识点记录，我会在考完后的6月25日晚整理好后更新的，图片未上传图床所以没有加载出来，)"></a>(以下都是零碎的知识点记录，我会在考完后的6月25日晚整理好后更新的，图片未上传图床所以没有加载出来，)</h1><p>输入命令cd . 用vscode打开</p>
<p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20220613121730446.png" alt="image-20220613121730446"></p>
<p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20220613130335196.png" alt="image-20220613130335196"></p>
<p>会报错，需要在项目中打开</p>
<p>npm run serve</p>
<p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20220613120931100.png" alt="image-20220613120931100"></p>
<p>在浏览器中输入 localhost:8080 </p>
<p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20220613122359809.png" alt="image-20220613122359809"></p>
<p>自带的组建中，我们进行一下修改</p>
<p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20220613123926052.png" alt="image-20220613123926052"></p>
<p>将它自带的都删掉，</p>
<p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20220613155809059.png" alt="image-20220613155809059"></p>
<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><h3 id="1-在A组建中使用B组建"><a href="#1-在A组建中使用B组建" class="headerlink" title="1. 在A组建中使用B组建"></a>1. 在A组建中使用B组建</h3><pre class="line-numbers language-none"><code class="language-none">import B from "./B.vue"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-可以用-lt-gt-代替成对标签"><a href="#2-可以用-lt-gt-代替成对标签" class="headerlink" title="2.可以用<  />代替成对标签"></a>2.可以用&lt;  /&gt;代替成对标签</h3><h3 id="3-通过data-return-的方式传输数据"><a href="#3-通过data-return-的方式传输数据" class="headerlink" title="3. 通过data(){return }的方式传输数据"></a>3. 通过data(){return }的方式传输数据</h3><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p>vue create + 名称 </p>
<p>npm i hexo-cli -g</p>
<h3 id="一些代码"><a href="#一些代码" class="headerlink" title="一些代码"></a>一些代码</h3><p>v-for</p>
<p>v-show</p>
<h2 id="需要注意的几点"><a href="#需要注意的几点" class="headerlink" title="需要注意的几点"></a>需要注意的几点</h2><p>需要多单词驼峰命名</p>
<p>@click需要加@</p>
<p>methods不要忘记加s</p>
<p>return中的用逗号隔开</p>
<p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20220613202245273.png" alt="image-20220613202245273"></p>
<p>冒号前需要有空格</p>
<h2 id="一些小插曲"><a href="#一些小插曲" class="headerlink" title="一些小插曲"></a>一些小插曲</h2><p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20220613193958586.png" alt="image-20220613193958586"></p>
<p>npm i hexo-cli -g</p>
<p>由npm安装</p>
<p>箭头函数  如果使用了this，不会指向当前对象本身，而是指向外面的</p>
<p>axios本身就是函数</p>
<p>alert() 警告消息框  该消息框提供了一个“确定”按钮让用户关闭该消息框</p>
<p>confirm() 确认消息框 使用确认消息框可向用户问一个“是-或-否”问题，并且用户可以选择单击“确定”按钮或者单击“取消”按钮</p>
<p>prompt() 提示消息框 提示消息框提供了一个文本字段，用户可以在此字段输入一个答案来响应您的提示</p>
<p>通过lombok生成方法，tostring等等</p>
<p>add是大括号{}</p>
<p>npm i axios</p>
<p>npm i <a href="mailto:bootstrap@5.2.0-beta1">bootstrap@5.2.0-beta1</a></p>
<p><a href="https://getbootstrap.com/docs/5.2/content/tables/">https://getbootstrap.com/docs/5.2/content/tables/</a></p>
<p>npm i element-ui</p>
<blockquote>
<p>11月17日开始更新</p>
</blockquote>
<h2 id="关于500的报错"><a href="#关于500的报错" class="headerlink" title="关于500的报错"></a>关于500的报错</h2><p>在使用<code>apipost</code>的过程中，在调试<code>增</code>功能时出现了500的报错</p>
<p><img src="https://img-blog.csdnimg.cn/e0ebd5a3f84546f9a4c738d27be6a520.png" alt="500的报错"></p>
<p>当时找了很久的错误，后来在<code>IDEA</code>的提示中找到了答案，</p>
<p><img src="https://img-blog.csdnimg.cn/e3ad14fd92e3489b9f7847f6d3b11c89.png" alt="提示"></p>
<p>提示说place的值为空，于是回到数据库查看<code>设计表</code></p>
<p><img src="https://img-blog.csdnimg.cn/fdd6a848afeb4ddf8ebb39c1f19be970.png" alt="设计表的查看"></p>
<p>果然是这一块的设置为<code>not null</code>，报错的问题找到了。</p>
<p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20221117152817440.png" alt="image-20221117152817440"></p>
]]></content>
      <categories>
        <category>期末作业</category>
      </categories>
  </entry>
  <entry>
    <title>spss的学习</title>
    <url>/posts/21f40e05.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>阿里</title>
    <url>/posts/1211f35c.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>vue学习</title>
    <url>/posts/b38a0bed.html</url>
    <content><![CDATA[<p><code>scoped</code> 不同组建之间就不会相互影响到</p>
<h2 id="通过从上到下的方式实现"><a href="#通过从上到下的方式实现" class="headerlink" title="通过从上到下的方式实现"></a>通过从上到下的方式实现</h2><p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20221128164044370.png" alt="image-20221128164044370"></p>
<p> 内容部分是通过我们的路由进行一个分页展示，最上方是导航栏。</p>
<p>项目一般都是从上到下去写</p>
<h2 id="card"><a href="#card" class="headerlink" title="card"></a>card</h2><p>所有的内容都可以用卡片括起来，这样就不丑了</p>
<h2 id="公共子元素"><a href="#公共子元素" class="headerlink" title="公共子元素"></a>公共子元素</h2><p>当两边都存在公共子元素时，可以用Content</p>
<p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20221128213620329.png" alt="image-20221128213620329"></p>
<p>在vue3中可以用slot将它们渲染出来</p>
<p>修改之后需要停止后重启。</p>
]]></content>
  </entry>
  <entry>
    <title>阅读学习</title>
    <url>/posts/f6e4b961.html</url>
    <content><![CDATA[<h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><ol>
<li><p>仔细阅读题干，画出关键词</p>
</li>
<li><p>a. 第一段看一遍题，找匹配项</p>
<p>b. 只读关键的位置：<code>首位两句，转折，观点，总结</code></p>
</li>
<li><p>回看未选段落剩余部分</p>
</li>
</ol>
<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="仔细画题："><a href="#仔细画题：" class="headerlink" title="仔细画题："></a>仔细画题：</h2><p>画不用记，最多画3处</p>
<h2 id="同意替换："><a href="#同意替换：" class="headerlink" title="同意替换："></a>同意替换：</h2><p>1.同义反义 2.词序 3.词性变化 4.泛指换特指 5.主动被动</p>
<h2 id="有舍有得"><a href="#有舍有得" class="headerlink" title="有舍有得"></a>有舍有得</h2><ol>
<li>只读关键的句子</li>
<li>用过的段落的直接跳过</li>
</ol>
<h2 id="不求甚解"><a href="#不求甚解" class="headerlink" title="不求甚解"></a>不求甚解</h2><p>标记信息对应即选择，尽量看懂。</p>
<blockquote>
<p>注意：所有的否定都要画下来</p>
</blockquote>
<blockquote>
<p>几乎不会在问句出题，因此可以直接跳过</p>
</blockquote>
<blockquote>
<p>不认识的前缀在大多数情况下是否定</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>六级写作笔记</title>
    <url>/posts/659b7b89.html</url>
    <content><![CDATA[<p>Directions: For this part, you are allowed 30 minutes to write an essay on why students should be encouraged to develop creativity?</p>
<p>​        In the contemporary society where technology is developing at a rapid rate, creative thinking has been brought into focus. At the same time, many experts suggest that both teachers and schools should attach great importance to encouraging students to develop creativity. A number of reasons can be collected to explain the suggestion.</p>
<p>​        The reasons why the development of students’ creativity is of considerable importance are as follows. Perhaps the primary reason is that developing  a creative mindset is beneficial to academic success. In addition, no one could deny the fact that creative ability can exert a positive influence on future career. The stories of most successful entrepreneurs in the world, such as Steve Jobs, provide a <strong>glimpse</strong> into how creative mind can help them find business opportunities and build a prosperous company. Lastly, with competition growing fiercely, thinking outside the box is increasingly a requirement of ensuring more desirable results. Then how to develop creativity? Perhaps the first step is that students need to read extensively to enrich mind. Another crucial step is to put novel ideas into practice.</p>
<p>​        In conclusion, there are many well-documented benefits of being creative and I highly suggest that everyone, especially university students invest effort to cultivate creativity.</p>
<p>​    在科技飞速发展的现代社会，创造性思维被投射进（人们的）视野中。与此同时，许多专家建议，老师 和学校需要重视鼓励学生发展创造力。大量的原因可以用来解释这一建议。</p>
<p>​    学生们的创造力为何极其重要的原因如下。或许首要原因是发展创造力思维有助于学业的成功。此外，无人可以否认创造性的能力可以在未来职业中发挥积极影响的事实。世界上最（   most successful应该翻译为最成功而不是大多数）成功企业家，例如乔布斯，<del>提供了一瞥</del>==可以让我们一窥==a glimpse into于创新思维如何帮助他们寻找商业机会和建立一个繁荣的公司。最后，随着竞争逐渐激烈fiercely，打破常规thinking outside of the box越来越成为确保desirable合意==理想==结果的必需品。于是如何发展创造力呢？也许第一步是学生需要去广泛阅读来开阔思想。另外重要的一步是将novel新颖的，与众不同的想法投入实践。</p>
<p>​    总之，<del>这有许许多多记录详尽的</del>well-documented拥有创造力的好处有据可查以及我<del>高度</del>==强烈==建议每一个人，尤其是大学生投资努力于开拓cultivate创造力。</p>
<p>​        In the contemporary society where the technology is developing at a rapid rate, creativity mind is on the focus. At the same time, a number of experts suggest that teachers and schools should take great importance to encouraging students to develop their creativity. Many reasons are collected to explain this suggestion.</p>
<p>​        The reasons why the students’ creative mindset is considerable important are as follows. Perhaps the major reasons is that developing creative mindset is able to contribute the academic success. In addition, no one can deny a fact that the ability of creativity can exert positive influence on the future carrer. The most successful entropreneus , such as Steve Jobs, provided a glimpse into </p>
<p>​        As is clearly demonstrated in the bar chart, the gross enrollment ratio in higher education in China increased dramatically from 3.4% in 1990 to 51.6% in 2019. Apparently, the figures reveal that China has made remarkable achievements in higher education. From my perspective, the reasons behind accomplishments are various.</p>
<p>​        I can think of no better reasons than the following ones to explain this social phenomenon. In the first place, this success is bound up with technological advancement and economic growth. Besides, Chinese government has implemented a package of polices and raised plenty of funds to make higher education more accessible to students including those from families in poverty. At the same time, both citizens and the whole society are the beneficiaries of the accomplishments in higher education. To be specific, receiving higher education can improve individuals’ competitive edge and contribute to the sustainable development of whole society.</p>
<p>​        In conclusion, this chart is a perfect index of the remarkable achievements made in China’s higher education. Meanwhile, it is reasonable for us to believe that such a tendency will continue in the forthcoming years and definitely contribute to our country’s prosperity in the long run.</p>
<p>​        A famous and enlightening saying goes that “Respect others, and you will be respected.” This remark conveys a thought-provoking notion that people should attach great importance to showing respect for others, as this behaviors is the key to gaining respect from people around us. In my opinion, examples from history, science and everday experience can attest the notion mentioned above.</p>
<p>​        The reasons why respecting other people matters are as follows. In the first place, respecting workmates in the workplace is beneficial to creating a positive and enjoyable working atmosphere, which can lay a solid foundation for team success. The stories of famous teams in the filed of competitive sports,  such as Chines Women Volleyball Team, provide a glimpse into how mutual respect among team members can contribute to a harmonious and successful team. In addition, some sociologists believe that treating friends, acquaintances, and strangers with respect in daily communication can exert a positive influence on interpersonal relationships.</p>
]]></content>
  </entry>
  <entry>
    <title>函数的第二次作业</title>
    <url>/posts/d1cd730.html</url>
    <content><![CDATA[<h1 id="1-例6-18"><a href="#1-例6-18" class="headerlink" title="1 例6-18"></a><font color="blue">1 例6-18</font></h1><h2 id="1-1-分析"><a href="#1-1-分析" class="headerlink" title="1.1 分析"></a><font color="blue">1.1 分析</font></h2><p>见下方<code>1.2 代码实现</code>，可以看到课本实现时使用了Python的内置函数<code>zip()</code>:分别将<code>原始字符串</code>和<code>用户输入的字符串</code>中的每一个字符打包成了一个个元组，最后在比较时的是这些元组返回的每一对字符。<br><br>然而我们不妨查阅<code>《Python官方文档》</code>上对应的解释(以下只截取部分解释)，来<strong>看看在使用该函数时还需要注意哪些情况：</strong><br><br><img src="https://img-blog.csdnimg.cn/26863aa5d3c8404f9c8cf6b27223031f.png" alt="Python官方文档对zip()的解释"></p>
<p>也就是说，在本题中当两个字符串进行匹配时<code>zip()</code>函数帮我们<strong>将最长的字符串裁剪至了最短字符串的长度</strong>。<br><br>因而，如果我们不比较<code>字符串的长度</code>，两个字符串最后的匹配结果可能是100%，但是存在这两个字符串并不一致的情况。<br>该情况演示如下：<br><img src="https://img-blog.csdnimg.cn/f3b01a4b417a4a26aa4b3ebcc1b84157.png" alt="不比较字符串长度可能出现的问题"></p>
<h2 id="1-2-代码实现"><a href="#1-2-代码实现" class="headerlink" title="1.2 代码实现"></a><font color="blue">1.2 代码实现</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rate</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> userInput<span class="token punctuation">)</span><span class="token punctuation">:</span>
    right <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> origin_char<span class="token punctuation">,</span> user_char <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> userInput<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> origin_char <span class="token operator">==</span> user_char<span class="token punctuation">:</span>
            right <span class="token operator">+=</span><span class="token number">1</span>
    <span class="token keyword">return</span> right<span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span>

origin <span class="token operator">=</span> <span class="token string">'Your smile will make my whole world and bright.'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span>
userInput <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入："</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>userInput<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"字符串长度不一致，请重新输入"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"准确率为：{:.2%}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>rate<span class="token punctuation">(</span>origin<span class="token punctuation">,</span> userInput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>Your smile will make my whole world and bright.
准确率为：100.00%</code></pre>
<h1 id="2-例6-19"><a href="#2-例6-19" class="headerlink" title="2 例6-19"></a><font color="green">2 例6-19</font></h1><h2 id="2-1-分析"><a href="#2-1-分析" class="headerlink" title="2.1 分析"></a><font color="green">2.1 分析</font></h2><p>见<code>2.2 代码实现</code>的注释</p>
<h2 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a><font color="green">2.2 代码实现</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>
    text <span class="token operator">=</span> text<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 将文本中的字母统一为小写</span>
    <span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token string">",.?-:\'"</span><span class="token punctuation">:</span>
        text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token comment"># 将文本中的标点替换为空格</span>
    <span class="token keyword">return</span> text

<span class="token keyword">def</span> <span class="token function">wordFreg</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> topn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    words <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 分割出每个单词</span>
    counts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>
<span class="token comment"># get()方法在统计单词出现频率中很常用，如果在字典中存在就在原计数上+1，否则就计数为1</span>
        counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
    excludes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'the'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'of'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'be'</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> word <span class="token keyword">in</span> excludes<span class="token punctuation">:</span>
        <span class="token keyword">del</span><span class="token punctuation">(</span>counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 删除excludes中的单词</span>
    items <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># sort()方法是针对列表的，因此我们将其变成列表</span>
    items<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> 
    <span class="token keyword">return</span> items<span class="token punctuation">[</span><span class="token punctuation">:</span>topn<span class="token punctuation">]</span>

text <span class="token operator">=</span> <span class="token triple-quoted-string string">'''I have a dream today!I have a dream that one day every valley shall be exalted, every hill and mountain shall be made low, the rough places will be made plain, and the crooked places will be made straight; "and the glory of the Lord shall be revealed, and all flesh shall see it together."
This is our hope.  This is the faith that I go back to the South with. With this faith we will be able to hew out of the mountain of despair a stone of hope.  With this faith we will be able to transform the jangling discords of our nation into a beautiful symphony of brotherhood.  With this faith we will be able to work together, to pray together, to struggle together, to go to jail together, to stand up for freedom together, knowing that we will be free one day.'''</span>
text <span class="token operator">=</span> getText<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
<span class="token keyword">for</span> word<span class="token punctuation">,</span> freq <span class="token keyword">in</span> wordFreg<span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;10}{:&gt;}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> freq<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"统计结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>will      6
together  6
this      5
shall     4
faith     4
with      4
we        4
that      3
made      3
able      3
i         2
have      2
dream     2
one       2
day       2
every     2
mountain  2
places    2
is        2
our       2
统计结束</code></pre>
<h1 id="3-实验指导p58第7题"><a href="#3-实验指导p58第7题" class="headerlink" title="3 实验指导p58第7题"></a><font color="orange">3 实验指导p58第7题</font></h1><h2 id="3-1-分析"><a href="#3-1-分析" class="headerlink" title="3.1 分析"></a><font color="orange">3.1 分析</font></h2><p>书上的方法已经写的很详细了，没有需要另外补充的，因此以下对书上的方法进行简述：<br><br>先将正整数<code>num</code>转换为字符串<code>s</code><br><br>1. 方法一：将字符串遍历时的每个字符转换为数字进行累加。<br><br>2. 方法二：使用列表函数<code>sum()</code>将通过列表生成器生成的由<code>各位数字</code>的字符作为元素组成的列表进行求和。<br><br>3. 方法三：思路同方法二，这次使用的是<code>map()</code>函数来代替<code>列表生成器</code>帮助我们将字符串<code>s</code>转换为列表。</p>
<h2 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a><font color="orange">3.2 代码实现</font></h2><h3 id="3-2-1-方法一"><a href="#3-2-1-方法一" class="headerlink" title="3.2.1 方法一"></a><font color="orange">3.2.1 方法一</font></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment"># 将数字转换为字符串</span>
    s <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>
        <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span>

num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"各位数字之和为："</span><span class="token punctuation">,</span>add<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>请输入一个正整数：452
各位数字之和为： 11</code></pre>
<h3 id="3-2-2-方法二"><a href="#3-2-2-方法二" class="headerlink" title="3.2.2 方法二"></a><font color="orange">3.2.2 方法二</font></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># s = str(num)</span>
    <span class="token comment"># ls = [int(c) for c in s]</span>
    <span class="token comment"># return ls</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"各位数字之和为："</span><span class="token punctuation">,</span>add<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>请输入一个正整数：54321
各位数字之和为： 15</code></pre>
<p>以上代码函数部分可以简写成一行，如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>因此，我们可以想到<code>lambda</code>表达式！</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"各位数字之和为："</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> num<span class="token punctuation">:</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>请输入一个正整数：12345
各位数字之和为： 15</code></pre>
<h3 id="3-2-3-方法三"><a href="#3-2-3-方法三" class="headerlink" title="3.2.3 方法三"></a><font color="orange">3.2.3 方法三</font></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>

num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"各位数字之和为："</span><span class="token punctuation">,</span>add<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>请输入一个正整数：5678
各位数字之和为： 26</code></pre>
<p>同上<code>3.2.2 方法二</code>，这里也可以使用<code>lambda表达式</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># f = lambda num: sum(map(int, str(num)))</span>

<span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># print("各位数字之和为：",f(num))</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"各位数字之和为："</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> num<span class="token punctuation">:</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>请输入一个正整数：8765
各位数字之和为： 26</code></pre>
<h1 id="4-实验指导p58第11题"><a href="#4-实验指导p58第11题" class="headerlink" title="4 实验指导p58第11题"></a><font color="red">4 实验指导p58第11题</font></h1><h2 id="4-1-分析"><a href="#4-1-分析" class="headerlink" title="4.1 分析"></a><font color="red">4.1 分析</font></h2><p>同样书上的方法已经写的很详细了，另外之前的作业也有这道题，因此简述一下即可：<br><br>1. 方法一：下一项为<code>item*10+a</code>（item为当前项数值，a为参数）。<br><br>2. 方法二：将数字a转换为字符串<code>str(a)</code>，可以利用<code>字符串乘法的特性</code>，下一项为<code>int(str(a))*n</code>（n为当前第n项，规定n&gt;0）。</p>
<h2 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a><font color="red">4.2 代码实现</font></h2><h3 id="4-2-1-方法一"><a href="#4-2-1-方法一" class="headerlink" title="4.2.1 方法一"></a><font color="red">4.2.1 方法一</font></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        s <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s={}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个1-9之间的某个数字a:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数n:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>请输入一个1-9之间的某个数字a:6
请输入一个正整数n:10
s=7407407400</code></pre>
<h3 id="4-2-2-方法二"><a href="#4-2-2-方法二" class="headerlink" title="4.2.2 方法二"></a><font color="red">4.2.2 方法二</font></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> <span class="token number">0</span>
    item <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        item <span class="token operator">=</span> item <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> a
        s <span class="token operator">+=</span> item
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s={}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个1-9之间的某个数字a:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数n:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>请输入一个1-9之间的某个数字a:6
请输入一个正整数n:10
s=7407407400</code></pre>
<h1 id="5-实验指导p58第17题"><a href="#5-实验指导p58第17题" class="headerlink" title="5 实验指导p58第17题"></a><font color="purple">5 实验指导p58第17题</font></h1><h2 id="5-1-思路分析"><a href="#5-1-思路分析" class="headerlink" title="5.1 思路分析"></a><font color="purple">5.1 思路分析</font></h2><p>这题比较有意思，除了课本中所提示的通过比较<code>ASCII码</code>大小的方式来判断是否包含数字和字母以外，还有几种方法：<br><br>1. 既然是针对字符串，既然我们使用的是拥有庞大类库的Python语言。那么首先应该想到是否有相关的内置函数或方法。<br><code>str.islower()</code>可以帮助我们判断是否存在小写字母，<code>str.isupper()</code>可以用于判断是否存在大写字母，<code>str.isdigit()</code>可以判断是否存在数字。<br><br>如果题目还要求数字和密码混合输入或者判断密码是否包含字母，我们同样有<code>str.isalnum()</code>和<code>str.isalpha</code>来帮助我们。（Python官方文档的对其相关说明贴在了<code>5.3 Python文档相关补充</code>，见下）<br><br>2. 另外，既然是判断字符也可以通过使用<code>运算符in</code>来判断该字符是否在a~z组成的字符串中从而得知其是否为小写字母。同理，判断小写字母与数字也可如法炮制。（实现分别见<code>5.2 代码实现</code>的第7、13、19行。）<br><br>最后，再来回答书中提出的问题，为什么在循环中需要使用<code>break</code>？<br><br>我们不妨假设判断密码是否有数字时不使用<code>break</code>的情况：如果该密码有n个数字（规定n&gt;0），那么密码强度就会增加n级。这很明显与题意<code>密码包含数字则密码强度增加一级</code>不符。</p>
<h2 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a><font color="purple">5.2 代码实现</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">judge</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>
    strength <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">:</span>
        strength <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> password<span class="token punctuation">:</span>
        <span class="token comment"># if i.islower():</span>
        <span class="token comment"># if i in 'abcdefghijklmnopqrstuvwxyz':</span>
        <span class="token keyword">if</span> <span class="token string">'a'</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">:</span>
            strength <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">break</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> password<span class="token punctuation">:</span>
        <span class="token comment"># if i.isupper():</span>
        <span class="token comment"># if i in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":</span>
          <span class="token keyword">if</span> <span class="token string">'A'</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">:</span>
            strength <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">break</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> password<span class="token punctuation">:</span>
        <span class="token comment"># if i.isdigit():</span>
        <span class="token comment"># if i in '0123456789':</span>
        <span class="token comment"># if 0 &lt; int(i) &lt; 10:</span>
        <span class="token keyword">if</span> <span class="token string">'0'</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">:</span>
            strength <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">break</span>
    <span class="token keyword">if</span> strength <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密码强度为1级"</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> strength <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密码强度为2级"</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> strength <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密码强度为3级"</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> strength <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密码强度为4级"</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密码强度为0级"</span><span class="token punctuation">)</span>
password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span>
judge<span class="token punctuation">(</span>password<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>请输入密码：15dreS
密码强度为4级</code></pre>
<h2 id="5-3-Python文档相关补充"><a href="#5-3-Python文档相关补充" class="headerlink" title="5.3 Python文档相关补充"></a><font color="purple">5.3 Python文档相关补充</font></h2><p><img src="https://img-blog.csdnimg.cn/cc4d08c927c74e13941cc2fe3f8bd0e1.png" alt="isdigit()"><br><img src="https://img-blog.csdnimg.cn/39365f9f94fc46b59c9ce587dc09297d.png" alt="islower()"><br><img src="https://img-blog.csdnimg.cn/3aaba25a6ac24571a75c4dcdbccec4a6.png" alt="isupper()"><br><img src="https://img-blog.csdnimg.cn/434ac757030e45f79f3e928950150ab7.png" alt="isalnum()和isalpha()"></p>
<h1 id="6-反思与复盘"><a href="#6-反思与复盘" class="headerlink" title="6 反思与复盘"></a>6 反思与复盘</h1><p>在完成这个作业的过程中，我的效率有些过于低下了，为此展开了反思。</p>
<h2 id="限时完成，提高效率"><a href="#限时完成，提高效率" class="headerlink" title="限时完成，提高效率"></a>限时完成，提高效率</h2><p>首先应该给自己<code>限时</code>，如果在这个时间内没能完成这个<code>to do list</code>，那么就不要再做了，直接丢掉然后去做其它的学习任务。毕竟如果从作业布置开始的那一天开始距离ddl还有很长的时间。这样也可以增强自己在做题时的紧迫感，而不至于思绪经常溜号，以及交叉学习也能让自己不会长时间卡在思维定势里。<br>其次在做题的时候可以先把<code>框架</code>打出来，先预览所有要去做的题然后列下能立刻想到的思路（这个时间绝对不会花太长，千万不要懒得去做），这样会让自己之后做题顺畅很多。</p>
<h2 id="不要急，慢慢来"><a href="#不要急，慢慢来" class="headerlink" title="不要急，慢慢来"></a>不要急，慢慢来</h2><p>如果没有思路，那就应该先勇于承认自己在这一块知识没有掌握好。不要着急，先将题目大致预览一遍，写下自己的思路和卡在了哪些地方（当然这个过程同样是需要限时的），列出几个关键词后再看看课本的相关知识先复习，不要着急去写。因为如果急着去做题而不是复习，自己常常会陷入焦虑之中，这个时候往往会产生厌学从而逃离焦虑反而距离作业渐行渐远。</p>
<h2 id="完成永远大于完美"><a href="#完成永远大于完美" class="headerlink" title="完成永远大于完美"></a>完成永远大于完美</h2><p>完成永远大于完美。如果代码没能实现或者有报错不要担心，无论是对所学的掌握还是动力，都是在行动之中逐渐获得与积累的，而绝不是在犹豫彷徨与胆怯不自信中进步的。所以要直接开始去做，<br>另外永远不要相信<code>一劳永逸</code>这个词，不要认为自己作业第一次做就可以达到完美也不要认为自己写了一次作业就可以完全掌握了。无论是代码的运行还是对关联知识的理解都是在不断运用不断修改中体会和领悟到的，而不是一次就可以达到醍醐灌顶的效果。</p>
<h2 id="信念"><a href="#信念" class="headerlink" title="信念"></a>信念</h2><p>无论是面对代码报错还是在使用Pycharm或者Jupyter甚至是在未来的任何事情上出现了问题，都要有一种信念，那就是：它一定会被我解决！如果还没有解决，就只能说明是付出的时间不够。<br>这个作业从开始到完成一共用了两天的时间，在这期间出现过Jupyter连接服务器失败，出现过代码突然无法在Jupyter中运行了，以及lambda函数的使用异常还有各种代码报错甚至电脑绿屏。但是我带着<code>我一定会解决这些问题</code>、<code>这些问题都只是暂时的</code>的信念，最后将它们逐一解决掉了。这些问题被解决后，也让我对这些知识有了更深刻的理解。因此，也希望在将来，如果我再遇到报错或者其它问题，我也要带着这样的信念去面对它们！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结：限时（记录ddl）+计时、保持专注（手机关机）、不要急慢慢来（先花几分钟预览要做什么，将大致思路以及要做哪些的框架还有卡在哪里了都逐一写下来；不必要求自己在一个时间段内完成，可以分几次来完成——第一次预览并记录下思路和卡在了哪里，第二次去复习解决掉自己的问题，第三次再来正式写作业，最后再完善与修改它们。）<br>最后的最后总结：学习就是不断制作“预习——学——复习”的<code>to do list</code>和在ddl前完成<code>to do list</code>的过程，放在作业里也同样：作业是制作“预先浏览并记录下相关思路及疑问——正式去写——修改、完善、总结复盘和重做作业的内容”的<code>to do list</code>和完成的过程。<br>最后给自己留下一个问题，Python的函数部分会考哪些呢，站在出题者的角度，如果是我出题我会怎么出？这将作为我复习的重点！</p>
]]></content>
  </entry>
  <entry>
    <title>python函数作业1</title>
    <url>/posts/cd2045dd.html</url>
    <content><![CDATA[<h1 id="1-例6-5"><a href="#1-例6-5" class="headerlink" title="1 例6-5"></a><font color="blue">1 例6-5</font></h1><h2 id="1-1-分析1"><a href="#1-1-分析1" class="headerlink" title="1.1 分析1"></a><font color="blue">1.1 分析1</font></h2><p><code>sep</code>和<code>end</code>可以控制输出格式：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>…<span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>…<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>当我们想让输出格式分别用‘-’或‘/’多项输出以及输出之后不换行，方式如下：</p>
<h2 id="1-2-代码实现1"><a href="#1-2-代码实现1" class="headerlink" title="1.2 代码实现1"></a><font color="blue">1.2 代码实现1</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre><code>1-2-3</code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre><code>123</code></pre>
<h2 id="1-3-分析2"><a href="#1-3-分析2" class="headerlink" title="1.3 分析2"></a><font color="0000C6">1.3 分析2</font></h2><p>书上这一部分程序使用了Python的语法糖<code>列表生成式</code>，当i为不3的倍数时输出以逗号结尾，否则换行:</p>
<h2 id="1-4-代码实现2"><a href="#1-4-代码实现2" class="headerlink" title="1.4 代码实现2"></a><font color="0000C6">1.4 代码实现2</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">","</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre><code>1,2,3
4,5,6
7,8,9</code></pre>
<h1 id="2-例6-6"><a href="#2-例6-6" class="headerlink" title="2 例6-6"></a><font color="green">2 例6-6</font></h1><h2 id="2-1-分析"><a href="#2-1-分析" class="headerlink" title="2.1 分析"></a><font color="green">2.1 分析</font></h2><p>函数定义时，*c表示表示可接受任意个（包含0个）位置参数，当函数调用时，所有未使用（未匹配）的位置参数会在函数内自动组装进一个元组对象中,<br>此元组对象会赋值给局部变量c</p>
<p>函数调用时，*c表示解包元组对象中的每个元素作为位置参数传入到被调用函数中</p>
<h2 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a><font color="green">2.2 代码实现</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">commonMultiple</span><span class="token punctuation">(</span><span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 暂时还没理解题目要求“自己定义可变参数”是做什么，之后会修改的</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:^4}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>

count <span class="token operator">=</span> commonMultiple<span class="token punctuation">(</span><span class="token string">"李白"</span><span class="token punctuation">,</span> <span class="token string">"杜甫"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共{}人"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>
count <span class="token operator">=</span> commonMultiple<span class="token punctuation">(</span><span class="token string">"李白"</span><span class="token punctuation">,</span> <span class="token string">"杜甫"</span><span class="token punctuation">,</span> <span class="token string">"王维"</span><span class="token punctuation">,</span> <span class="token string">"袁枚"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共{}人"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="3-例6-16"><a href="#3-例6-16" class="headerlink" title="3 例6-16"></a><font color="pink">3 例6-16</font></h1><h1 id="3-1-代码实现"><a href="#3-1-代码实现" class="headerlink" title="3.1 代码实现"></a><font color="pink">3.1 代码实现</font></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">*</span>para<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 形参不确定， 用可变的位置参数</span>
    avg <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span><span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span>
    g <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> para <span class="token keyword">if</span> i <span class="token operator">&gt;</span> avg<span class="token punctuation">]</span> <span class="token comment"># 列表生成式</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>avg<span class="token punctuation">,</span> g<span class="token punctuation">)</span>

m<span class="token punctuation">,</span> l <span class="token operator">=</span> fun<span class="token punctuation">(</span><span class="token number">6.7</span><span class="token punctuation">,</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">2.15</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5.8</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"平均值:"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大于均值的数:"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>平均值: 1.07
大于均值的数: [6.7, 2.4, 2.15]</code></pre>
<h1 id="4-例6-17"><a href="#4-例6-17" class="headerlink" title="4 例6-17"></a><font color="orange">4 例6-17</font></h1><h2 id="4-1-分析"><a href="#4-1-分析" class="headerlink" title="4.1 分析"></a><font color="orange">4.1 分析</font></h2><p>该程序使用了join()以及upper()方法，查阅<code>《Python官方文档》</code>，可以了解到相关解释：<br><img src="https://img-blog.csdnimg.cn/0fedc60f3b894a09941a50d71acaadfa.png" alt="join"><br><img src="https://img-blog.csdnimg.cn/91064bdd760a4f7f8b076bee4865a694.png" alt="在这里插入图片描述"></p>
<h2 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a><font color="orange">4.2 代码实现</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    lst <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> lst<span class="token punctuation">]</span>

s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入短语："</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span> join<span class="token punctuation">(</span>fun<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>输入短语：very important person
VIP</code></pre>
<h1 id="5-p140-习题3"><a href="#5-p140-习题3" class="headerlink" title="5 p140 习题3"></a><font color="red">5 p140 习题3</font></h1><h2 id="5-1-分析"><a href="#5-1-分析" class="headerlink" title="5.1 分析"></a><font color="red">5.1 分析</font></h2><p>题意要求计算平均成绩，并给出<code>return int((a + b +c)) / 3</code>作为<code>avg(a, b, c)函数</code>的返回结果，<br>又得知学生成绩由字典存储，因此求平均成绩则需要获得字典中的<code>值</code>，然后套用上式即可，于是产生了以下<em>两种思路</em>：</p>
<blockquote>
<ol>
<li>我们可以新建一个字典<code>new_dict</code>，之后遍历这个字典的<code>键值对</code>。<br>利用<code>字典名[键] = 值</code>的方式来更新这个新字典，即<code>new_dict[key] = s[avg(value[0], value[1]), value[2]]</code>，<br>这样新字典的键必定为原有字典的键<code>学生名</code>，同时它的值必定是<code>平均成绩</code>，最后输出这个新建的字典即可。</li>
<li>结合上述，我们不妨在遍历原有字典时，将<code>值</code>取出来时用列表的函数<code>sum()</code>与<code>len()</code>求出平均成绩。<br>这个时候，我们是将列表<code>list</code>作为函数的参数，创建的是一个<code>avg(list)</code>函数</li>
</ol>
</blockquote>
<h2 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a><font color="red">5.2 代码实现</font></h2><h3 id="5-2-1-思路1"><a href="#5-2-1-思路1" class="headerlink" title="5.2.1 思路1"></a><font color="red">5.2.1 思路1</font></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">avg</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'小李'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'小张'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'小陈'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'小杨'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
new_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> s<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    new_dict<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> avg<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>{'小李': 62, '小张': 77, '小陈': 87, '小杨': 73}</code></pre>
<h3 id="5-2-2-思路2"><a href="#5-2-2-思路2" class="headerlink" title="5.2.2 思路2"></a><font color="red">5.2.2 思路2</font></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'小李'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'小张'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'小陈'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'小杨'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
new_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> s<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    new_dict<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> avg<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>{'小李': 62, '小张': 77, '小陈': 87, '小杨': 73}</code></pre>
<h1 id="6-p140-习题4"><a href="#6-p140-习题4" class="headerlink" title="6 p140 习题4"></a><font color="purple">6 p140 习题4</font></h1><h2 id="6-1-思路分析"><a href="#6-1-思路分析" class="headerlink" title="6.1 思路分析"></a><font color="purple">6.1 思路分析</font></h2><p>思路同上述<code>5.2.2</code></p>
<h2 id="6-2-代码实现"><a href="#6-2-代码实现" class="headerlink" title="6.2 代码实现"></a><font color="purple">6.2 代码实现</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">avg</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'小李'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'小张'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'小陈'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'小杨'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
new_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> s<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    new_dict<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> avg<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>{'小李': 65, '小张': 83, '小陈': 90, '小杨': 73}</code></pre>
]]></content>
  </entry>
  <entry>
    <title>英语六级备考（未整理）</title>
    <url>/posts/5d485823.html</url>
    <content><![CDATA[<h1 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h1><h2 id="技巧归纳"><a href="#技巧归纳" class="headerlink" title="技巧归纳"></a>技巧归纳</h2><p>听力音频来源：每日英语听力 或 喜马拉雅</p>
<p>听力时留意：完整对应，重复表达；同义表达/解释举例</p>
<p>平时训练步骤： 预览选项（可能存在：生词、看不完，只画重点，区分出选项共性和差异。预测并重点关注：如四个选项都出现<code>she</code>或<code>her</code>就重点关注女生，四个选项都有<code>By</code>则重点注意是什么方式……）-听音对应（1（第一遍先多勾原词，可以不用听懂）-2（找语义、同意替换定位，以及排除干扰，听懂更多，建立关联）-1）-核对提升（单句精听，不需要每个单词都写下来，写下<code>关键词</code>）-复听训练（综合理解）</p>
<blockquote>
<h5 id="原词语音对应"><a href="#原词语音对应" class="headerlink" title="原词语音对应"></a>原词语音对应</h5><p>同意替换表达</p>
<p>排除干扰对应</p>
<p>选择完整对应</p>
</blockquote>
<p>时间要求，在十秒钟看完一道题的四个选项。</p>
<p>对于选项需要找共性（或 倾向性，如<code>worsening</code>和<code>advese</code>），对比差异。</p>
<p>题目顺序，选项乱序。偶有例外，但整体不影响过级。</p>
<p>考试考的是眼睛耳朵手并用的过程。</p>
<p>如何使用听力稿子：使用修正带<code>做拆分</code>，将考察的能力点和语言点挖空，然后专项填空。挖哪些？<strong>选项原词、同义替换/重复表达、结构信号/逻辑表达、否定表达。</strong></p>
<h3 id="在做训练时至少两个礼拜练习"><a href="#在做训练时至少两个礼拜练习" class="headerlink" title="在做训练时至少两个礼拜练习"></a>在做训练时至少两个礼拜练习</h3><p>3遍（不要暂停）-2词（每次记录关键词）-理解</p>
<p><code>语音对应-选项原词-边听边勾</code></p>
<p><code>语义对应（同意替换）-完整对应-边听边记</code></p>
<p>定位出题区间，缩小答案范围</p>
<h3 id="认识的单词听不出的方法："><a href="#认识的单词听不出的方法：" class="headerlink" title="认识的单词听不出的方法："></a>认识的单词听不出的方法：</h3><ul>
<li>看听力稿积累表达分析考点<strong>跟读纠音</strong></li>
<li>单句<strong>精听</strong>段落精听全文精听综合理解</li>
</ul>
<h3 id="听力能力："><a href="#听力能力：" class="headerlink" title="听力能力："></a>听力能力：</h3><p>1.来得及 </p>
<p>2.抓重点 <em>例如：</em><code>guest/冠军/书 </code></p>
<h3 id="听力时应该注意的地方"><a href="#听力时应该注意的地方" class="headerlink" title="听力时应该注意的地方"></a>听力时应该注意的地方</h3><ol>
<li>but–话题转折</li>
<li><code>A, B, and C</code> 并列，可以作为干扰项</li>
<li><strong>否定词</strong>或者<strong>否定表达</strong></li>
<li>段落当中的重复表达，可以作为备选</li>
<li>例证可以作为听不出的补充</li>
<li>问句 可以带答案</li>
</ol>
<h3 id="Long-conversation"><a href="#Long-conversation" class="headerlink" title="Long conversation"></a>Long conversation</h3><p><code>提问定位</code></p>
<p><code>一男一女</code>(选项记得分男女标记)</p>
<p>A:引入+提问回答</p>
<p>B:回答（如果回答no，会更正答案信息）</p>
<h4 id="1-访谈类"><a href="#1-访谈类" class="headerlink" title="1.访谈类"></a>1.访谈类</h4><blockquote>
<p>一问一答一回合<br>问句可能带答案<br>观点切换要注意<br>指代关系要小心</p>
</blockquote>
<p>在练习长对话的时候记得分析他们每一句话的观点是一致还是相反。</p>
<p>当听见下道题选项的原词，并且换人了，那么大概率是已经到了下一题。这个时候不要再纠结上一题了</p>
<h4 id="2-讨论类"><a href="#2-讨论类" class="headerlink" title="2.讨论类"></a>2.讨论类</h4><h3 id="monologue-独白"><a href="#monologue-独白" class="headerlink" title="monologue 独白"></a>monologue 独白</h3><blockquote>
<p>开头给主旨，全文来展开 （一般第一题和主旨有关，如果没有听到就先跟上下一题的节奏，之后可以通过全文倒推总结）</p>
<p>逻辑要关注，否定转折处（专家有话说/研究表明，同向、反向——如果听不出来，就在练习时挖空）</p>
<p>重视重复度，越难越简单（越重要解释越多，越难原句越多）</p>
</blockquote>
<p>因为一个人说，所以会有文章结构</p>
<p>“完整对应”可能来自两组专家，这个时候需要记录哪个观点是哪一组说的</p>
<p>分为说明文和记叙文</p>
<ol>
<li>说明文，总分结构，对一件事从不同方向进行描述，选项常以it, they等这些抽象名词。应该多注意<strong>前面没有听到的新表达</strong>（偶有提示词，如<code>whatever</code>），可能是到了下一题了。关注起承转合处，前三句（开头必给重点，即主旨信息）/听到最后一个字，another/and then/next等结构信号会作为提示要换题了或者是对前叙信息举例（需要自己思考）</li>
<li>记叙文，顺序为主，结构信号：时间、地点、事物出现，关注叙事要素，重视因果、转折、时间。</li>
</ol>
<blockquote>
<h2 id="读题读什么"><a href="#读题读什么" class="headerlink" title="读题读什么"></a>读题读什么</h2><p>1.共性-定位 </p>
<p>2.差异-选择  </p>
<p>注意：动词和形容词会存在同意替换</p>
<p>语音对应+完整对应</p>
<p>完整对应+重复表达表示很重要</p>
<p>当选项有发音类似时尤其需要小心</p>
<p>当选项在原文中，是并列关系，就都不选</p>
<p>边听边对应/边听边排除</p>
<p>表明观点/坚定立场/想法意见 与答案有关（decided that/ideas from/meaning/was chosen as）</p>
<p>解释举例（meaning/like/including）</p>
<p>逻辑关系 （because/the reason why/also类似in addition或者further more表示另一个核心观点出现，但与之前的观点同向，如果是but则反向）</p>
<p>based on ……which are ……，……，and……重复表达</p>
</blockquote>
<h2 id="考点训练-可以用符号-中文-缩写代替"><a href="#考点训练-可以用符号-中文-缩写代替" class="headerlink" title="考点训练(可以用符号+中文+缩写代替)"></a>考点训练(可以用符号+中文+缩写代替)</h2><p>原词——语音对应</p>
<p>语义——完整对应 (部分对应有时候是干扰项)</p>
<p>结构——否定转折</p>
<h2 id="2-做题复盘"><a href="#2-做题复盘" class="headerlink" title="2 做题复盘"></a>2 做题复盘</h2><ol>
<li><p>文章出现make me a little sick.</p>
<pre><code>     虽然选项中没有 ，但是该题选项都与感受有关，则也能表明已经读到了这一题。</code></pre>
</li>
<li><blockquote>
<p>do not use up large amounts of land， water,  or feed.</p>
<p>insect farming also produces far fewer greenhouse gases.</p>
</blockquote>
<p>选项It is environmentally friendly.</p>
</li>
</ol>
<h2 id="错题总结"><a href="#错题总结" class="headerlink" title="错题总结"></a>错题总结</h2><p>如果做错，不要把关注点放在选项或者题号，而是<strong>关注该考点</strong>是否有注意到。</p>
<h3 id="单词积累"><a href="#单词积累" class="headerlink" title="单词积累"></a>单词积累</h3><p>call into question 保持怀疑</p>
<p>rescue package 救济包</p>
<p>flat or falling  没有变得更好</p>
<p>government subsidies 政府补助/津贴</p>
<p>layoffs 裁员</p>
<p>phased out 淘汰</p>
<p>pull through 渡过难关</p>
]]></content>
  </entry>
  <entry>
    <title>eNSP的一些命令(未整理)</title>
    <url>/posts/2fdaf2a2.html</url>
    <content><![CDATA[<blockquote>
<p>路由器配置地址</p>
<p><code>int g0/0/1</code> int表示interface，路由器的一个接口就是一个广播域</p>
<p><code>ip address + ip地址</code> 路由器的ip地址配置</p>
</blockquote>
<blockquote>
<p>交换机配置地址：需要通过vlan进行封装，操作如下：</p>
<p><code>vlan 10</code> –&gt; <code>q</code> –&gt; <code>int vlan 10</code> –&gt; <code>ip address + ip地址</code></p>
<p>将地址加入到相应的接口上：<code>int g0/0/1</code> 进入到这个接口–&gt;<code>port link-type ac</code> 选择进入方式–&gt; <code>port de vlan 10</code>允许vlan10通过</p>
<p>之后退出通过<code>dis vl</code>查看是否配置成功</p>
<p>*注意：输入<code>undo terminal monital</code>*就不会出现一大堆泛洪消息了</p>
</blockquote>
<p><code>undo</code> 取消</p>
<p><code>q</code> quit</p>
<p><code>ping命令 + 网关</code> 判断是否能通信</p>
<p><code>return</code> 直接返回到用户视图</p>
<p><code>display+命令</code> 查看接口信息或是配置信息 <em>注意：dis vlan20要写成vlan 20，别忘记中间有空格</em></p>
<p><code>display current-configuration</code> 查看当前所做的所有配置</p>
<p><code>sys</code> sysytem view</p>
<p><code>save</code> 保存</p>
<p><code>sysn</code> 重命名</p>
<p><code>reboot</code>重启设备 <em>注意：是在用户视图中使用；如果不保存，断电后会丢失，所以记得sava保存</em></p>
<p><code>ip route-static 目标地址 下一跳的ip</code></p>
]]></content>
  </entry>
  <entry>
    <title>万圣节总结python中的语法糖</title>
    <url>/posts/8615a179.html</url>
    <content><![CDATA[<p>python中的语法糖并不是糖果，而是指在python语法中有一些特殊写法可以简化我们的代码。</p>
<p>在python的语法中有哪些语法糖呢？以下给出常用的几个语法糖总结：</p>
<h1 id="1-交换变量"><a href="#1-交换变量" class="headerlink" title="1. 交换变量"></a>1. 交换变量</h1><p>当我们要交换下方a，b的值时需要怎么做呢？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>一般中规中矩的写法都是需要定义第三个变量c，做法如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> a
a <span class="token operator">=</span> b
b <span class="token operator">=</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但是在python中只需要一句话：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="2-判断变量"><a href="#2-判断变量" class="headerlink" title="2. 判断变量"></a>2. 判断变量</h1><p>判断变量是否在某个范围内，例如<code>a = 67</code>，如何通过程序判断它是否在60与80之间呢？</p>
<p>一般的写法是：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> a <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token keyword">and</span> a <span class="token operator">&lt;=</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在python中也可以将其简化：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">60</span> <span class="token operator">&lt;=</span> a <span class="token operator">&lt;=</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="3-快速构造字符串"><a href="#3-快速构造字符串" class="headerlink" title="3. 快速构造字符串"></a>3. 快速构造字符串</h1><p>字符串的乘法可以帮助我们快速构造字符串。</p>
<p>如当我们需要通过60个“-”组成下划线时，就不必手敲60次，可以直接通过乘法帮助我们完成：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>同理，如果想要组成30个“*”就写成：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'@'</span> <span class="token operator">*</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以后当我们需要快速构造多个相同字符时就可以优先想到使用<code>字符串的乘法</code>来完成！</p>
<h1 id="4-列表拼接"><a href="#4-列表拼接" class="headerlink" title="4. 列表拼接"></a>4. 列表拼接</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如何实现将a，b两个列表拼接在一起呢？</p>
<p>我们当然可以利用<code>for循环</code>一个一个添加，但是Python为我们提供了一个通过加法拼接字符串的语法糖。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">+</span> b <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="5-列表切片"><a href="#5-列表切片" class="headerlink" title="5. 列表切片"></a>5. 列表切片</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如何取出a正数第二个与倒数第三个元素之间的数字组成新列表呢？</p>
<p>可以写成这样：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">2</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果是取前三个数呢？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>取后三个数同理：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="6-打包与解包"><a href="#6-打包与解包" class="headerlink" title="6. 打包与解包"></a>6. 打包与解包</h1><p>通过元祖可以帮助我们表示三维空间的坐标，例如:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果希望获得每个坐标的分量，传统的做法是：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
y <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
z <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但是在python中可以这样一句搞定（<em>解包</em>）：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>python会将a解包，然后按照顺序**<em>分别赋值**</em>给x, y, z。</p>
<p>反过来，如果要将x, y, z的值打包成一个元祖b，同理：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">b <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="7-列表推导式"><a href="#7-列表推导式" class="headerlink" title="7. 列表推导式"></a>7. 列表推导式</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果需要将a中的每一个数都加上100之后组成新的列表b，在python中可以这样操作：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">b <span class="token operator">=</span> <span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">100</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>不仅限于列表，字典集合同样适用。</p>
<h1 id="8-with语句"><a href="#8-with语句" class="headerlink" title="8. with语句"></a>8. with语句</h1><p>在<code>文件</code>中，可以通过<code>with</code>语句防止我们忘记写<code>关闭文件</code>后产生的麻烦。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
	data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>剑指Offer的刷题</title>
    <url>/posts/b92f1b1f.html</url>
    <content><![CDATA[<h1 id="1-week1"><a href="#1-week1" class="headerlink" title="1 week1"></a>1 <font color="blue">week1</font></h1><p><img src="https://img-blog.csdnimg.cn/00d2a13d32b741e48f7b18bb27a691e7.png" alt="week1完成情况"></p>
<p>不知不觉一个星期过去了，通过<code>week1</code>的习题让我重新拾起了数据结构中<code>链表</code>以及<code>二叉树</code>的知识，以下就此展开记录，也方便未来的自己复习相关知识!</p>
<h2 id="1-1-找出数组中重复的数字"><a href="#1-1-找出数组中重复的数字" class="headerlink" title="1.1 找出数组中重复的数字"></a>1.1 找出数组中重复的数字</h2><h3 id="1-1-1-问题描述"><a href="#1-1-1-问题描述" class="headerlink" title="1.1.1 问题描述"></a>1.1.1 问题描述</h3><p><img src="https://img-blog.csdnimg.cn/195c197d32f2446188126e80497ccd19.png" alt="找出数组中重复的数字"></p>
<h3 id="1-1-2-代码实现"><a href="#1-1-2-代码实现" class="headerlink" title="1.1.2 代码实现"></a>1.1.2 代码实现</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {
public:
    int duplicateInArray(vector&lt;int&gt;&amp; nums) {
        int n = nums.size();
      
        for (auto x : nums)
            if (x &lt; 0 || x &gt;= n)
                return -1;
        for (int i = 0; i &lt; n; i ++ ) {
           
            while (nums[nums[i]] != nums[i]) swap(nums[i], nums[nums[i]]);
            
            if (nums[i] != i) return nums[i];
        }

        return -1;
    }
};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>待更新，10月31日前更新完成</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>python作业的重做</title>
    <url>/posts/50ab5143.html</url>
    <content><![CDATA[<h1 id="1-题目分析与思路描述"><a href="#1-题目分析与思路描述" class="headerlink" title="1 题目分析与思路描述"></a>1 题目分析与思路描述</h1><h2 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title="1.1 题目描述"></a>1.1 题目描述</h2><p>用字典+列表 实现以下通讯录的增删改查功能:<br><img src="https://img-blog.csdnimg.cn/bc637a5a1836415e96a8e86530b7fad4.png" alt="题目"></p>
<h2 id="1-2-分析与思路"><a href="#1-2-分析与思路" class="headerlink" title="1.2 分析与思路"></a>1.2 分析与思路</h2><h3 id="1-2-1-增"><a href="#1-2-1-增" class="headerlink" title="1.2.1 增"></a>1.2.1 增</h3><p>首先，我们可以用字典来储存每一位联系人的信息：姓名作为联系人的键，手机号、邮箱、地址作为联系人这个键的值。<br>那么，用什么来储存这些联系人的字典呢？由于元组与集合的元素不能被修改，而本题通讯录中的联系人信息是要实现“增删改查”的，因此最佳的选择当然是使用列表。<br>所以，我们来创建这两个容器:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> dict3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> … <span class="token comment"># 此处省略无数个联系人信息构成的字典，之后我们在完整代码中通过循环来实现。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>容器创建好了，但是里面没有内容啊，怎么能说是通讯录呢？因此，我们需要“增”！实现第一个功能：添加联系人！<br>我们要增加什么呢？<em>当然是联系人以及其对应的信息：</em>第一是新增一个字典并在这个字典里增加联系人的信息，第二是将这个字典增加到列表中。前者使用字典的增加方法<code>update()</code>来新增一个字典并用<code>字典名[键]=值</code>的方式来添加这个新增字典里的条目，后者使用列表的增加方法<code>append()</code>增加字典这个元素。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">name<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入联系人的姓名："</span><span class="token punctuation">)</span>
phone<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入联系人的手机号："</span><span class="token punctuation">)</span>
email<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入联系人的邮箱："</span><span class="token punctuation">)</span>
address<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入联系人的地址："</span><span class="token punctuation">)</span>

<span class="token builtin">dict</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"姓名"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">"手机号"</span><span class="token punctuation">:</span> phone<span class="token punctuation">,</span> <span class="token string">"电子邮箱"</span><span class="token punctuation">:</span> email<span class="token punctuation">,</span> <span class="token string">",联系地址"</span><span class="token punctuation">:</span> address<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>于是，我们的通讯录中就有了第一个联系人，通过循环我们可以再生出无数个联系人，正如两千年前的先哲老子所言<code>一生二，二生三，三生万物</code>。</p>
<p>将该功能写成函数如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> email<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">dict</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"姓名"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>
                   <span class="token string">"手机号"</span><span class="token punctuation">:</span> phone<span class="token punctuation">,</span>
                   <span class="token string">"电子邮箱"</span><span class="token punctuation">:</span> email<span class="token punctuation">,</span>
                   <span class="token string">"联系地址"</span><span class="token punctuation">:</span> address<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2-2-查"><a href="#1-2-2-查" class="headerlink" title="1.2.2 查"></a>1.2.2 查</h3><p>好的，那么当我们有了很多个联系人的时候，我们应该怎么知道这个通讯录中联系人有哪些以及对应的信息呢？于是我们第二个功能的需求就出来了，那就是“查”！<br>查什么？根据题意，一是用户可以通过遍历查看这个通讯录所有的联系人以及信息（功能2），二是用户可以输入某个联系人的姓名查看其对应的信息。（功能5）<br>先来实现前者（功能2），我们可以用<code>for循环</code>遍历整个通讯录列表里的元素<em>字典</em>再用<code>for循环</code>遍历<code>items()</code>的方法来获取字典中的<em>键和值</em>。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> i<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># k, v分别表示获取联系人的姓名（键）以及联系人的信息</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>再来实现后者（功能5）:与功能2类似，直接如法炮制。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
     <span class="token keyword">if</span> name <span class="token keyword">in</span> i<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
         <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> i<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
             <span class="token keyword">print</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>将上述写成函数，如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">travese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您当前的通讯录所有联系人及其对应信息为："</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> i<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> name <span class="token keyword">in</span> i<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> i<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您要查找的联系人'</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">'的信息为：'</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2-3-删"><a href="#1-2-3-删" class="headerlink" title="1.2.3 删"></a>1.2.3 删</h3><p>在输入联系人的过程中，一定有不小心输错信息的时候或者也会存在有些联系人在创建之后没有再存在通讯录必要的情况，这个时候我们首先想到的是删掉这个联系人及其信息。对应在程序里删除的是通讯录列表里的一个<code>字典</code>元素。<br>我们来一起复习一下，列表删除元素的方式有哪些呢？列举如下：<code>del命令</code>，<code>pop()方法</code>，<code>remove()方法</code>。那么我们应该用哪一个呢？以下给出分析：</p>
<ol>
<li><p><code>del 列表名[索引]</code>可以通过正向索引和反向索引的方式删掉对应的列表元素。如果我们需要使用它，就要先用<code>index()</code>方法找到对应的索引号。<img src="https://img-blog.csdnimg.cn/ccfac704c3a94352a218637ad14c6f6a.png" alt="del指令"></p>
</li>
<li><p><code>列表名.pop(索引)</code>，如果我们需要使用它，也要先用<code>index()</code>方法找到对应的索引号。<img src="https://img-blog.csdnimg.cn/3ecd3c75ed0242478a7547725b945c34.png" alt="pop()方法"></p>
</li>
<li><p><code>列表.remove(元素值)</code>，可以直接通过输入的值删除，较为简单。<img src="https://img-blog.csdnimg.cn/74f1ed4ada8b46cab2db146577232349.png" alt="remove()方法"></p>
<p>综上所述，我们选用方便使用的<code>remove()</code>方法。<br><img src="https://img-blog.csdnimg.cn/9368de11809a4b0f82a1110a23b9ac6e.png" alt="使用remove()方法删除通讯录的联系人"><br>如上述代码所示，我们可以通过i来遍历通讯录的列表：如果要删除的联系人的姓名是列表中某一个字典的值，那么整个条目就会被移除。</p>
</li>
</ol>
<p>将上述结合题目要求写成函数，如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> name <span class="token keyword">in</span> i<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token builtin">list</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2-4-改"><a href="#1-2-4-改" class="headerlink" title="1.2.4 改"></a>1.2.4 改</h3><p>结合上述，如果在输入联系人的过程中，我们不小心输错了联系人的信息或者联系人的信息有所变化 ，可以使用删除这个联系人再重新增加这个联系人的方式实现。但是，这种方式过于繁琐了。<br>因此，我们能不能直接修改呢？以下是本人对字典更新方式的简述：</p>
<blockquote>
<p>在字典创建之后通过<strong>字典名[键]=值</strong>的方法进行更新，如果在字典中键不存在就会执行添加条目操作，如果键存在就会执行修改条目操作。</p>
</blockquote>
<p>于是，我们可以用以下的方式来修改字典中的值：<br><img src="https://img-blog.csdnimg.cn/fd912e897ad04afcb233955b92781c31.png" alt="修改通讯录中联系人信息"><br>如同上述的“删”使用的方法一样，我们也是用i来遍历通讯录的列表。随后，找到需要修改的联系人，并逐一给其中的每一个键赋上对应的值作为该联系人的信息。</p>
<p>将上述结合题目要求写成函数，如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">modify</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> email<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> name <span class="token keyword">in</span> i<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            i<span class="token punctuation">.</span>update<span class="token punctuation">(</span>
                <span class="token punctuation">{</span><span class="token string">"姓名"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>
                 <span class="token string">"手机号"</span><span class="token punctuation">:</span> <span class="token string">"phone"</span><span class="token punctuation">,</span>
                 <span class="token string">"电子邮箱"</span><span class="token punctuation">:</span> email<span class="token punctuation">,</span>
                 <span class="token string">"联系地址"</span><span class="token punctuation">:</span> address<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2-5-注意事项"><a href="#1-2-5-注意事项" class="headerlink" title="1.2.5 注意事项"></a>1.2.5 注意事项</h3><ol>
<li><p>新增联系人时需要判断用户输入的信息是否不为空，如果用户输入的字符串为空<code>' '</code>那么需要提醒用户重新输入。对于用户输入中产生的空格我们会用到<code>strip()</code>方法移除，以下做出简单的解释：</p>
<blockquote>
<p>在3.12版本的<a href="https://docs.python.org/zh-cn/3.12/library/stdtypes.html?highlight=strip#str.strip">Python官方文档</a>中是这样解释的：</p>
<p><img src="https://img-blog.csdnimg.cn/9607270b3032482182802f382e00fae2.png" alt="strip()方法的使用"></p>
<p>也就是说，<code>strip()</code>方法括号中的内容为空就会移除字符串空白符。</p>
</blockquote>
</li>
<li><p>查询、修改、删除联系人时需要判断原通讯录是否不为空以及该联系人是否在原通讯录中。</p>
<ol>
<li>可以使用<code>len()</code>函数判断通讯录是否为空：如果为该列表长度为0则表明没有元素，提醒用户该通讯录没有信息。</li>
<li>可以使用<code>in</code>运算符判断该联系人是否存在于通讯录：用i来遍历通讯录的列表，再使用<code>values()</code>方法来获取对应的值，判断姓名是否存在。</li>
</ol>
</li>
<li><p>在修改通讯录联系人信息的时候，可以先将该联系人信息打印出来，以方便用户修改。</p>
</li>
<li><p>如果用户输入了不在功能内的其它字符也需要有对应的提示。 </p>
</li>
</ol>
<h1 id="2-完整代码实现"><a href="#2-完整代码实现" class="headerlink" title="2 完整代码实现"></a>2 完整代码实现</h1><blockquote>
<p>结合1.2.5的注意事项，我们将上面实现的函数进行过了修改与补充。</p>
<blockquote>
<p>10月29日修改：将之前的代码修改为了使用函数的版本。</p>
</blockquote>
</blockquote>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 先假设一个通讯录，方便接下来写的时候参照：</span>
<span class="token comment"># list = [{'姓名': '张三', '手机号': '123', '电子邮箱': '123@qq.com', '地址': '武汉'},</span>
<span class="token comment">#         {'姓名': '李四', '手机号': '456', '电子邮箱': '456@qq.com', '地址': '武汉'}]</span>

<span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> email<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">dict</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"姓名"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>
                   <span class="token string">"手机号"</span><span class="token punctuation">:</span> phone<span class="token punctuation">,</span>
                   <span class="token string">"电子邮箱"</span><span class="token punctuation">:</span> email<span class="token punctuation">,</span>
                   <span class="token string">"联系地址"</span><span class="token punctuation">:</span> address<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> name <span class="token keyword">in</span> i<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> i<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您要查找的联系人'</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">'的信息为：'</span> <span class="token operator">+</span> v<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您要查找的联系人不存在"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">travese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您当前的通讯录所有联系人及其对应信息为："</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> i<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> v<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> name <span class="token keyword">in</span> i<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token builtin">list</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您要删除的联系人不存在"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">modify</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> email<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
        <span class="token comment"># if name in i.values():</span>
        i<span class="token punctuation">.</span>update<span class="token punctuation">(</span>
           <span class="token punctuation">{</span><span class="token string">"姓名"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>
            <span class="token string">"手机号"</span><span class="token punctuation">:</span> <span class="token string">"phone"</span><span class="token punctuation">,</span>
            <span class="token string">"电子邮箱"</span><span class="token punctuation">:</span> email<span class="token punctuation">,</span>
            <span class="token string">"联系地址"</span><span class="token punctuation">:</span> address<span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment"># else:</span>
        <span class="token comment">#     print("您要修改的联系人不存在")</span>

<span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎使用通讯录："</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.添加联系人"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2.查看通讯录"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3.删除联系人"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"4.修改联系人信息"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"5.查找联系人"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"6.退出"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span>
    fun <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入功能序号：'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> fun <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您要实现的是添加联系人功能"</span><span class="token punctuation">)</span>
        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入联系人的姓名："</span><span class="token punctuation">)</span>
        phone <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入联系人的手机号："</span><span class="token punctuation">)</span>
        email <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入联系人的邮箱："</span><span class="token punctuation">)</span>
        address <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入联系人的地址:"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span> <span class="token keyword">or</span> phone<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span> <span class="token keyword">or</span> email<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span> <span class="token keyword">or</span> address<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入有误，请重新输入"</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            add<span class="token punctuation">(</span>name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> email<span class="token punctuation">,</span> address<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> fun <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您要实现的是查看通讯录功能"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您当前的通讯录为空"</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            travese<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> fun <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您要实现的是删除联系人功能"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您当前的通讯录为空"</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入要删除的联系人姓名："</span><span class="token punctuation">)</span>
            delete<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token keyword">elif</span> fun <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您要实现的是修改联系人信息功能"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您当前的通讯录为空"</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入要修改的联系人姓名："</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> name <span class="token keyword">in</span> i<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> i<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>v<span class="token punctuation">)</span>
                    phone <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入新的联系人手机号："</span><span class="token punctuation">)</span>
                    email <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入新的联系人邮箱："</span><span class="token punctuation">)</span>
                    address <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入新的联系人地址:"</span><span class="token punctuation">)</span>
                    modify<span class="token punctuation">(</span>name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> email<span class="token punctuation">,</span> address<span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您要修改的联系人不存在"</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> fun <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您要实现的是查找联系人功能："</span><span class="token punctuation">)</span>
        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入您要查找的联系人姓名："</span><span class="token punctuation">)</span>
        search<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token keyword">elif</span> fun <span class="token operator">==</span> <span class="token string">'6'</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您已退出通讯录"</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入有误，请重新输入"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="3-总结与复盘"><a href="#3-总结与复盘" class="headerlink" title="3 总结与复盘"></a>3 总结与复盘</h1><p>首先，不要害怕写程序，不要害怕犯错。代码并不是人生，错了无数次就有无数次的报错提示，就有无数次不断调试和修改的机会！不断试错，在错误中学习和成长。</p>
<p>其次，在写程序的时候，那些无关紧要的细枝末节可以先不必考虑。放在首位思考的应是该题大致应该如何解决以及运用哪些知识点。实现了主要功能之后再去考虑在使用可能出现的问题与情况，或者在代码运行的过程中通过报错进行修改与调试。</p>
<p>最后，<code>悟已往之不谏，知来者之可追</code>。让我们跳转至下个链接，一起开启新的刷题吧！<a href="https://www.liuyu.biz/posts/b92f1b1f.html"><strong>《剑指offer》</strong>该书上习题刷题记录</a></p>
]]></content>
  </entry>
  <entry>
    <title>字典与集合的总结（持续更新中）</title>
    <url>/posts/5d43f4f8.html</url>
    <content><![CDATA[<h1 id="1-总述"><a href="#1-总述" class="headerlink" title="1. 总述"></a>1. 总述</h1><p>第五章的课程结束了，以下内容总结了课本上这一章的重点知识：</p>
<p><img src="https://img-blog.csdnimg.cn/09c24f795ba44dfc98898e46f8c68a82.png" alt="字典与集合总结"></p>
<h1 id="2-字典"><a href="#2-字典" class="headerlink" title="2. 字典"></a>2. 字典</h1><h2 id="2-1-创建字典"><a href="#2-1-创建字典" class="headerlink" title="2.1 创建字典"></a>2.1 创建字典</h2><h3 id="1-直接创建字典"><a href="#1-直接创建字典" class="headerlink" title="1) 直接创建字典"></a>1) 直接创建字典</h3><blockquote>
<p>通过大括号的形式将若干“键值对”放在一起</p>
<p><code>{键1:值1,键2:值2,……}</code></p>
</blockquote>
<h3 id="2-使用内置函数dict-创建字典"><a href="#2-使用内置函数dict-创建字典" class="headerlink" title="2) 使用内置函数dict()创建字典"></a>2) 使用内置函数dict()创建字典</h3><blockquote>
<p> 例如我们可以先写出列表之后将其转化为字典，方式如下：</p>
 <pre class="line-numbers language-python" data-language="python"><code class="language-python">items<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'俄罗斯'</span><span class="token punctuation">,</span><span class="token number">1707.5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    
dic<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p> 以上程序就会生成一个dic={‘俄罗斯’:1707.5}的字典</p>
<blockquote>
<p>注意：</p>
<p>1.键具有唯一性，字典中<strong>不允许</strong>出现相同的键(但是不同的键可以有相同的值）</p>
<p>2.<strong>键必须是不可变</strong>的类型，如列表就不可以作为键</p>
</blockquote>
</blockquote>
<h2 id="3-先定义一个空字典，之后添加"><a href="#3-先定义一个空字典，之后添加" class="headerlink" title="3) 先定义一个空字典，之后添加"></a>3) 先定义一个空字典，之后添加</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'俄罗斯'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1707.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="2-2-访问字典"><a href="#2-2-访问字典" class="headerlink" title="2.2 访问字典"></a>2.2 访问字典</h2><blockquote>
<p>访问字典是通过<strong>键</strong>这个索引来访问值</p>
</blockquote>
<blockquote>
<p>举例如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">dic<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'俄罗斯'</span><span class="token punctuation">:</span><span class="token number">1707.5</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'俄罗斯'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>最后我们可以看到会输出俄罗斯这个键在字典里所对应的值1707.5</p>
</blockquote>
<h2 id="2-3-更新字典"><a href="#2-3-更新字典" class="headerlink" title="2.3 更新字典"></a>2.3 更新字典</h2><blockquote>
<p>在字典创建之后通过<code>字典名[键]=值</code>的方法进行更新，如果键在字典中不存在就会执行添加条目的操作，如果存在就会执行修改条目</p>
</blockquote>
<h2 id="2-4-删除字典条目"><a href="#2-4-删除字典条目" class="headerlink" title="2.4 删除字典条目"></a>2.4 删除字典条目</h2><h3 id="1-del命令"><a href="#1-del命令" class="headerlink" title="1) del命令"></a>1) del命令</h3><ul>
<li><code>del 字典名</code> 整个字典全部删除</li>
<li><code>del 字典名[键]</code>删掉字典中该键队对应的条目</li>
</ul>
<h3 id="2-pop-方法"><a href="#2-pop-方法" class="headerlink" title="2) pop()方法"></a>2) pop()方法</h3><ul>
<li><p><code>pop(键)</code></p>
<p>会弹出指定的键对应的值，并删掉对应的条目</p>
</li>
<li><p><code>pop(键,默认值(如：找不到删除的条目))</code></p>
<blockquote>
<p>区分于get()方法:后者并不会删掉条目</p>
</blockquote>
</li>
</ul>
<h3 id="3-popitem-方法"><a href="#3-popitem-方法" class="headerlink" title="3) popitem()方法"></a>3) popitem()方法</h3><blockquote>
<p>会随机删除字典中的一个条目</p>
</blockquote>
<p>那么问题来了如果删到字典没有条目了还会继续吗？答案是并不会，如下：</p>
<p><img src="https://img-blog.csdnimg.cn/fd39e35c471e4c2599926edffe20e2ac.png" alt="popitem()方法的演示"></p>
<h3 id="4-clear-方法"><a href="#4-clear-方法" class="headerlink" title="4) clear()方法"></a>4) clear()方法</h3><p><strong>清空</strong>字典中的<strong>所有条目</strong>，但并不会删掉字典本身的结构。</p>
<h2 id="2-5-查找字典条目"><a href="#2-5-查找字典条目" class="headerlink" title="2.5 查找字典条目"></a>2.5 查找字典条目</h2><h3 id="1-运算符in"><a href="#1-运算符in" class="headerlink" title="1) 运算符in"></a>1) 运算符in</h3><p>略</p>
<h3 id="2-get-方法"><a href="#2-get-方法" class="headerlink" title="2) get()方法"></a>2) get()方法</h3><ul>
<li><p><code>get(键,默认值)</code></p>
<blockquote>
<p>应用：利用<code>get(键,0)+1</code>可以用于统计字符出现次数，如下：</p>
<p><img src="https://img-blog.csdnimg.cn/15a2bdabf02d4c9b917c44d26ec2c34f.png" alt="get()方法的应用"></p>
</blockquote>
</li>
</ul>
<h2 id="2-6-遍历字典"><a href="#2-6-遍历字典" class="headerlink" title="2.6 遍历字典"></a>2.6 遍历字典</h2><h3 id="1-keys-方法"><a href="#1-keys-方法" class="headerlink" title="1) keys()方法"></a>1) <code>keys()</code>方法</h3><blockquote>
<p>可以遍历字典中所有的键</p>
</blockquote>
<h3 id="2-values-方法"><a href="#2-values-方法" class="headerlink" title="2) values()方法"></a>2) <code>values()</code>方法</h3><blockquote>
<p>可以遍历字典中所有的值</p>
</blockquote>
<h3 id="3-items-方法"><a href="#3-items-方法" class="headerlink" title="3) items()方法"></a>3) <code>items()方法</code></h3><blockquote>
<p>以<code>(键,值)</code>的形式返回所有的条目</p>
</blockquote>
<h2 id="2-7-字典的排序"><a href="#2-7-字典的排序" class="headerlink" title="2.7 字典的排序"></a>2.7 字典的排序</h2><blockquote>
<p>sorted()方法</p>
<p>代码暂时略</p>
</blockquote>
<h2 id="2-8-合并字典"><a href="#2-8-合并字典" class="headerlink" title="2.8 合并字典"></a>2.8 合并字典</h2><h3 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1) for循环"></a>1) for循环</h3><blockquote>
<p>结合<code>items()</code>方法,利用k、v两个变量遍历被合并的字典再添加进需要合并的字典</p>
</blockquote>
<h3 id="2-update-方法"><a href="#2-update-方法" class="headerlink" title="2) update()方法"></a>2) update()方法</h3><blockquote>
<p><code>需要合并的字典名.update(被合并的字典名)</code></p>
</blockquote>
<h3 id="3-dict-函数"><a href="#3-dict-函数" class="headerlink" title="3) dict()函数"></a>3) dict()函数</h3><ul>
<li><p>先将其转为两个列表后合并为一，再用dict()函数转为字典</p>
</li>
<li><p>dic=dict(duc1,**dic2)</p>
<blockquote>
<p>注意：字典的键唯一，那么问题来了：两个字典具有相同的键但值不同，在合并之后会是怎样的呢？</p>
<p>键对应的值为被合并字典的值（如下）</p>
<p><img src="https://img-blog.csdnimg.cn/1cca491084c744c38f02c82719262045.png" alt="合并"></p>
</blockquote>
</li>
</ul>
<h1 id="3-集合"><a href="#3-集合" class="headerlink" title="3. 集合"></a>3. 集合</h1><ul>
<li>集合互斥且唯一，因此可以帮助我们删掉重复的元素</li>
<li>集合的元素必须是不可变的就和字典的键一样，因此列表不可以充当元组中的元素</li>
</ul>
<h2 id="3-1-创建集合"><a href="#3-1-创建集合" class="headerlink" title="3.1 创建集合"></a>3.1 创建集合</h2><h3 id="1-直接创建"><a href="#1-直接创建" class="headerlink" title="1) 直接创建"></a>1) 直接创建</h3><blockquote>
<p><code>{元素1,元素2,…}</code></p>
</blockquote>
<h3 id="2）-set-函数创建"><a href="#2）-set-函数创建" class="headerlink" title="2） set()函数创建"></a>2） set()函数创建</h3><ul>
<li><p>括号内为<code>字符串</code>，会将字符串去重后让字符变成元素</p>
</li>
<li><p>括号内为<code>列表</code>，会将列表去重后使其元素变成集合的元素</p>
</li>
<li><p>括号内为空，会创建一个空集合</p>
<blockquote>
<p>注意：不可以用<code>{}</code>的方式创建空集合，因为这样创建后的类型为字典</p>
</blockquote>
</li>
</ul>
<h2 id="3-2-集合的基本操作"><a href="#3-2-集合的基本操作" class="headerlink" title="3.2 集合的基本操作"></a>3.2 集合的基本操作</h2><h3 id="1-增"><a href="#1-增" class="headerlink" title="1) 增"></a>1) 增</h3><ul>
<li><p><code>add()</code>方法</p>
</li>
<li><p><code>update()</code>方法</p>
<blockquote>
<p>注意：增添之后会自动去除重复的元素</p>
</blockquote>
<h3 id="2-删"><a href="#2-删" class="headerlink" title="2) 删"></a>2) 删</h3><ul>
<li><p>remove()方法</p>
<p><code>S.remove(item)</code>将指定元素item从集合S中删掉，若不存在元素item将会报错</p>
</li>
</ul>
</li>
<li><p><code>discard()</code>方法</p>
<blockquote>
<p><code>S.discard(item)</code>将指定元素item从集合S中删掉，若不存在元素item系统正常执行</p>
</blockquote>
</li>
<li><p><code>pop()</code>方法</p>
<blockquote>
<p>随机删除并返回一个元素</p>
</blockquote>
</li>
<li><p><code>clear()</code>方法</p>
<blockquote>
<p>清空集合所有元素</p>
</blockquote>
</li>
</ul>
<h3 id="3-查"><a href="#3-查" class="headerlink" title="3) 查"></a>3) 查</h3><p>运算符<code>in</code></p>
<h3 id="4-数学运算"><a href="#4-数学运算" class="headerlink" title="4) 数学运算"></a>4) 数学运算</h3><ul>
<li>并集 <code>A|B</code> or <code>A.union(B)</code></li>
<li>交集 <code>A&amp;B</code> or <code>A.intersection(B)</code></li>
<li>差集 <code>A-B</code> or <code>A.difference(B)</code></li>
<li>对称差集<code>A^B</code> or <code>A.symmetric_difference(B)</code></li>
</ul>
<h1 id="4-与C-中STL字典map-哈希表hash-map与集合set以及Java中的Map和Set使用方法的对比"><a href="#4-与C-中STL字典map-哈希表hash-map与集合set以及Java中的Map和Set使用方法的对比" class="headerlink" title="4.与C++中STL字典map/哈希表hash_map与集合set以及Java中的Map和Set使用方法的对比"></a>4.与C++中STL字典map/哈希表hash_map与集合set以及Java中的Map和Set使用方法的对比</h1><p><em>先空着，周末有空再更</em></p>
<h1 id="5-在各种习题中的运用"><a href="#5-在各种习题中的运用" class="headerlink" title="5.在各种习题中的运用"></a>5.在各种习题中的运用</h1><p><em>先空着，周末有空再更</em></p>
]]></content>
  </entry>
  <entry>
    <title>从JDBC到MyBatis再到MyBatisPlus框架的学习（未整理，更新中）</title>
    <url>/posts/702709a0.html</url>
    <content><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>编程中第一简单的是<code>html</code>，第二简单的就是<code>JDBC</code>了。因为<code>JDBC</code>的格式是固定的，不需要深入理解只是背诵就可以完成<code>JDBC</code>的程序。</p>
<p>JDBC常用的API有：DriverManager、Connection、Statement、ResultSet、PreparedStatement</p>
<blockquote>
<p>相关操作之后再更新</p>
</blockquote>
<h1 id="MyBits"><a href="#MyBits" class="headerlink" title="MyBits"></a>MyBits</h1><p>框架framework就是对通用代码的封装，提前写好了一些接口和类，一般以jar包的形式存在。</p>
<p>SSM三大框架的学习顺序:MyBatis, Spring, Spring MVC</p>
<p>数据访问层（持久层）Dao:对数据的增删改查</p>
<p>MyBatis就是增强版的JDBC</p>
<p>JDBC的不足：1.sql语句写死了;2.Java语句繁琐</p>
<p>ORM:对象Object 关系Relation 映射Mapping</p>
<p>MyBatis是一个半自动化的ORM，SQL语句需要程序员自己编写。</p>
<p>Hibernate是一个全自动化的ORM，SQL语句可以自动生成。</p>
<p>像User这样的类，有特殊的称呼：有人把它叫做pojo（普通java类）,有的叫做javabean（咖啡豆）,有的叫做domain（领域模型）</p>
<h2 id="resources目录"><a href="#resources目录" class="headerlink" title="resources目录"></a>resources目录</h2><ol>
<li><p>放在这个目录当中的，一般都是资源文件，配置文件。直接放到resources目录下的资源，等同于放到了类的根路径下</p>
</li>
<li><p>开发步骤:</p>
<ol>
<li><p>第一步：打包方式<code>jar</code></p>
</li>
<li><p>引入依赖 <a href="https://mvnrepository.com/">引入依赖的地址</a></p>
<ol>
<li><p>mybatis依赖</p>
</li>
<li><p>mysql驱动依赖</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>js基础语法学习</title>
    <url>/posts/e0deaa88.html</url>
    <content><![CDATA[<h1 id="1-1-JS的调用方式与执行顺序"><a href="#1-1-JS的调用方式与执行顺序" class="headerlink" title="1.1 JS的调用方式与执行顺序"></a>1.1 JS的调用方式与执行顺序</h1><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>HTML页面中的任意位置加上<script type="module"></script>即可。</p>
<p>常见的使用方式有以下几种“</p>
<ul>
<li><p>直接在<script type="module"></script>标签内写JS代码。</p>
</li>
<li><p>直接引入文件：</p>
<p><code>&lt;script type="module" src="/static/js/index.js"&gt;&lt;/scipt&gt;</code>。</p>
</li>
<li><p>将所需的代码通过<code>import</code>关键字引入到当前作用域。</p>
</li>
</ul>
<p>例如：</p>
<p><code>/static/js/index.js</code>文件中的内容为：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name<span class="token operator">=</span><span class="token string">"cxk"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span><span class="token punctuation">{</span>
	name<span class="token punctuation">,</span>
	print
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>&lt;script type="module"&gt;&lt;/script&gt;</code>中的内容为：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span><span class="token operator">&gt;</span>
	<span class="token keyword">import</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> print <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"/static/js/injdex.js"</span><span class="token punctuation">;</span>
	
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><ol>
<li>类似于HTML与CSS按从上到下的顺序执行；</li>
<li>事件驱动执行；</li>
</ol>
<h2 id="HTML，CSS，JavaScript三者之间的关系"><a href="#HTML，CSS，JavaScript三者之间的关系" class="headerlink" title="HTML，CSS，JavaScript三者之间的关系"></a>HTML，CSS，JavaScript三者之间的关系</h2><ol>
<li>CSS控制HTML</li>
<li>Javascript控制CSS与HTML</li>
<li>为了方便开发与维护，尽量按照上述顺序写代码。例如：不要在HTML中调用JavaScript的函数。</li>
</ol>
<h1 id="变量与运算符"><a href="#变量与运算符" class="headerlink" title="变量与运算符"></a>变量与运算符</h1><h2 id="let与const"><a href="#let与const" class="headerlink" title="let与const"></a><code>let</code>与<code>const</code></h2><p>用来声明变量，作用范围为当前作用域。</p>
<ul>
<li><code>let</code>用来定义变量；</li>
<li><code>const</code>用来定义常量；</li>
</ul>
<p>例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"cxk"</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> d <span class="token operator">=</span> n<span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token string">"xiuaoheizi"</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul>
<li><code>number</code>：数值变量，例如<code>1</code>,<code>2.5</code></li>
<li><code>string</code>：字符串，例如<code>cxk</code>，<code>xiaoheizi</code>，单引号与双引号均可。字符串中的每个字符为只读类型。</li>
<li><code>boolean</code>：布尔值，例如<code>true</code>,<code>false</code></li>
<li><code>object</code>：对象，类似于<code>C++</code>中的指针，例如<code>[1,2,3]</code>，<code>{name:"cxk",age:18}</code>，<code>null</code></li>
<li><code>undefined</code>：未定义的变量</li>
</ul>
<p>类似于Python，JavaScript中的变量类型可以动态变化。</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>与<code>C++</code>、``Python`类似，不同点：</p>
<ul>
<li><code>**</code>表示乘方</li>
<li>等于与不等于用<code>===</code>和<code>!==</code></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>数学建模比赛的学习记录</title>
    <url>/posts/a87c26aa.html</url>
    <content><![CDATA[<h1 id="写这篇笔记的原因"><a href="#写这篇笔记的原因" class="headerlink" title="写这篇笔记的原因"></a>写这篇笔记的原因</h1><p>一个暑假被我摸鱼混过去了，今天上午老师要求阅读论文，作为leader的我却又摸鱼了一天，最后把讲解题目的任务都给了队友，这让我在看到其他队伍的leader都挑起了重担而我却在苟活，良心受到了巨大的谴责。</p>
<p>一开始我并不认为我需要学习数学建模，这个比赛混一混就够了，毕竟我还要学习很多专业课。但是我发现，我并没有拿出这个时间去好好学习任何东西，而是放在聊天、游戏以及刷视频上。</p>
<p>有些时候，给自己太多期望和安排，反而到了最后因为认为每一个都很重要都应该去做，反而最后就拖拖拉拉，以至于一个都没有完成。</p>
<p>因此不如给自己一个目标，也就是在数学建模比赛前期我至少要看完相关网课。</p>
<p><strong>有些时候就是因为自认为自己坚持不下来，即使自己坚持下来了也不一定有用。那么我这次要认为自己一定能坚持学习得完，并且学习完了就一定能让我获奖!我一定要去做！</strong></p>
<p>人生就是要尝试挑战自己，让自己变得不一样。</p>
<h1 id="一、如何查找"><a href="#一、如何查找" class="headerlink" title="一、如何查找"></a>一、如何查找</h1><blockquote>
<p>Just do what you gotta do！</p>
</blockquote>
<p><code>现在是16：49，我正在看如何准备数学建模。刚刚摸鱼了一分钟。不能再摸鱼啦！</code></p>
<p><img src="https://img-blog.csdnimg.cn/1ecafb5527e040ffbbb2ff9fc81633e1.png" alt="在这里插入图片描述"></p>
<h2 id="可以安装的几款软件"><a href="#可以安装的几款软件" class="headerlink" title="可以安装的几款软件"></a>可以安装的几款软件</h2><p>1.Matlab</p>
<p>2.Mathpix：截图即可公式编辑</p>
<p>3.AxGlyph：学术绘图</p>
<p><img src="https://img-blog.csdnimg.cn/b205ea1d51b24307a063d0d46b5b1f2d.png" alt="ABC赛题特点"></p>
<blockquote>
<p>不要学了几分钟，就认为自己学了好多，然后就放心大胆去玩几小时！！</p>
</blockquote>
<h2 id="如何使用搜索引擎"><a href="#如何使用搜索引擎" class="headerlink" title="如何使用搜索引擎"></a>如何使用搜索引擎</h2><p><img src="https://img-blog.csdnimg.cn/ff7fa16e20bb4996a5ad5d634838a99d.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/a0b504f0820c4d528cab960a304191c6.png" alt="在这里插入图片描述"></p>
<p>通过高级检索搜索，关键词一般设置为模糊，例如搜索“神经网络”，模糊搜索出的结果就会包含“神经”或者“网络”。以便达达到搜索到的更多</p>
<p><img src="https://img-blog.csdnimg.cn/4221afc9630c4d5f8403b3adb65a1272.png" alt="其它网站"></p>
<p><img src="C:\Users\75300\AppData\Roaming\Typora\typora-user-images\image-20220907173352474.png" alt="image-20220907173352474"></p>
]]></content>
  </entry>
  <entry>
    <title>开启Djiago课程的学习</title>
    <url>/posts/359fc57.html</url>
    <content><![CDATA[<h1 id="一、Python3语法的学习"><a href="#一、Python3语法的学习" class="headerlink" title="一、Python3语法的学习"></a><font color="orange">一、Python3语法的学习</font></h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a><font color="orange">1.准备工作</font></h2><p><img src="https://img-blog.csdnimg.cn/1ec18455aa704fec8980828a280e1f3f.png" alt="准备"><br>我们先打开python3，之后创建一个名为python_lesson的文件夹；<br><img src="https://img-blog.csdnimg.cn/81289423ef36403fbe093e6adfd034d0.png" alt="创建main.py"><br>之后创建一个python文件。<br><img src="https://img-blog.csdnimg.cn/c580eaa503774366963a4fccb02d6c94.png" alt="格式"><br>在python的第一行写上#!/usr/bin/env python3，第二行写上编码<br>之后写上print(“Hello World”)<br><img src="https://img-blog.csdnimg.cn/4b67c85633134b51b498c5f19d9ecd48.png" alt="运行"><br>于是在运行时就出现了。<br><img src="https://img-blog.csdnimg.cn/7932861c1a9d4e668ed07aba3a13f29d.png" alt="其他两种运行形式"><br>以上是其他的两种运行形式。</p>
<h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a><font color="orange">2.语法</font></h2><p>#： 注释（建议养成好习惯，空两格后加注释）<br><img src="https://img-blog.csdnimg.cn/ab9f37f75dcb49efabeb8e7441bb08ac.png" alt="计算器"><br>作为计算器，在输入需要计算的内容后，会自动输出。（ipython3会高亮以及补全的信息会更多。）<br><img src="https://img-blog.csdnimg.cn/3b1d25d1f90e42d2a72e1706ff9d34e8.png" alt="除号"><br>python中的除号默认是浮点数运算。<br><img src="https://img-blog.csdnimg.cn/b07273548475441981a7ef6ba0ae2900.png" alt="举例"><br>两个除号是整除，两个乘号是乘方。<br><img src="https://img-blog.csdnimg.cn/59ee257e6c044abcad91bce510fa272f.png" alt="整除的性质"><br>Python的整除是向下取整，而C++是向0取整。<br><img src="https://img-blog.csdnimg.cn/b710a67cac4349aa874e149566f97f0c.png" alt="定义变量"><br>python中可以直接定义变量。<br><img src="https://img-blog.csdnimg.cn/5dcee09e36324e25bbd28c476667a812.png" alt="下划线"><br>下划线_:取上一个的值。<br><img src="https://img-blog.csdnimg.cn/06ba66e8a1c84559aa23af18a5c8c2ec.png" alt="保留小数"><br>round可以用于保留小数。<br><img src="https://img-blog.csdnimg.cn/c1d105a0aef54ed78e00681cae67c734.png" alt="字符串"><br>单引号与双引号都可以表示字符串，\用于转义，如果不希望转义可以在前面补上r。<br><img src="https://img-blog.csdnimg.cn/1ff5a3d736f44fcab9a831c98bef9385.png" alt="双引号"><br>三个双引号。<br><img src="https://img-blog.csdnimg.cn/1b6e8cb2b99242639130f9f8b91a4837.png" alt="输出多个字符"><br><img src="https://img-blog.csdnimg.cn/ae6d338918994d71a3939ca14059a091.png" alt="拼接"><br>自动拼接字符串。<br><img src="https://img-blog.csdnimg.cn/a089043baa724bbd8a8e5dccf0832ff0.png" alt="+拼接"><img src="https://img-blog.csdnimg.cn/11a6935028314b05b5b45cb0f35a97ea.png" alt="访问字符串"><br><img src="https://img-blog.csdnimg.cn/eca730360a6b427abd93287ea6063df4.png" alt="字符串的下标"><br>python的下标可以从左往右，也可以从右往左访问。<br><img src="https://img-blog.csdnimg.cn/c4a90f83529f49739c2b9275b3213258.png" alt="切片"><br>切片，可以访问某个区间内的。如a[0:2]，就是从0-1。<br><img src="https://img-blog.csdnimg.cn/05e38be54b614372b478e110c47d1cc3.png" alt="官方文档的解释"><br>切片省略前后的输出。<br><img src="https://img-blog.csdnimg.cn/2a56ccfc0d5c458283b05fd2bb17ee95.png" alt="举例"><br><img src="https://img-blog.csdnimg.cn/036ce75aae06470a86b49359c1e4621d.png" alt="空串"><br><img src="https://img-blog.csdnimg.cn/b555dc5e844642c6b5c23f328798d3cd.png" alt="越界"><br>注意下标不能越界，但是切片可以，因为它会自动截断。<br><img src="https://img-blog.csdnimg.cn/b04a5b637ac84f18b25a26489ed1dd80.png" alt="修改"><br>与C++ 不同的是，python中的字符串不能修改，但是却可以增加。<br>len函数：求python所有长度。（数据结构：list数组，set，dict字典类似map）<br><img src="https://img-blog.csdnimg.cn/e3f75afc00e84d47a179e011a52a117c.png" alt="数组"><br>数组是用中括号定义。<br><img src="https://img-blog.csdnimg.cn/9d3f8d2367584d82b5c8f4e993920be3.png" alt="举例"><br>并且数组十分灵活。<br>和字符串一样，访问和切片完全相同，因此省略。<br><img src="https://img-blog.csdnimg.cn/628a4f4cc8b741559cceb92de14f5610.png" alt="指针"><br>如同指针，将a赋值给b后，修改a，b的值也会跟着修改。<br><img src="https://img-blog.csdnimg.cn/642821ba04bf4c9681116709984f4908.png" alt="复制"><br>浅拷贝。<br><img src="https://img-blog.csdnimg.cn/986ef1eff3464be9bea069e7bb6e587d.png" alt="深拷贝"><img src="https://img-blog.csdnimg.cn/4c55ad7d4a1d481abf149e098be0e5b7.png" alt="拷贝"></p>
<p>深拷贝，改a不改变b。<br><img src="https://img-blog.csdnimg.cn/f6fc98d192b847708cff653c02a7a247.png" alt="插入"><br><img src="https://img-blog.csdnimg.cn/a84292aa56bf4529b4c64d29b061e3c7.png" alt="增加"><br>增加元素。<br><img src="https://img-blog.csdnimg.cn/20dff89d1038450caba863ecac2f58f9.png" alt="2"></p>
<p><img src="https://img-blog.csdnimg.cn/018e7841fad742b79d7952d1a6fd44d7.png" alt="切片也可以改变"><br><img src="https://img-blog.csdnimg.cn/7546eb165ad14a89b0cf41c8165da1bd.png" alt="2"><br>切片也可以进行改变。<br><img src="https://img-blog.csdnimg.cn/850654e6662f4ee284d75e066780ab2d.png" alt="3"><br>通过改变切片的方法，我们可以将整个变成空串，从而清空数组。<br><img src="https://img-blog.csdnimg.cn/eaeca65a0a3d451392ad72f0d1ee5188.png" alt="1"><br>复合赋值。<br><img src="https://img-blog.csdnimg.cn/96326447c23a46a3ac46a4e2d580adcb.png" alt="1"><br>交换两个变量。<br><img src="https://img-blog.csdnimg.cn/4a6501d7e8844c0cbd61771703dc7d77.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d3469f1c166447c080f631773ddf9b08.png" alt="1"></p>
<p>python所有循环后面需要加上冒号。python不需要大括号，它是通过缩进判断是否在循环体内。<br><img src="https://img-blog.csdnimg.cn/7883c330ea214501bd09e06bfc9e3a6a.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/4a087901b4ce470d8025d12ed73a5dfa.png" alt="1"><br>通过print的end修改可以将最后输出都为回车改为“，”。</p>
<h1 id="二、Djiango的框架"><a href="#二、Djiango的框架" class="headerlink" title="二、Djiango的框架"></a><font color="blue">二、Djiango的框架</font></h1><p><img src="https://img-blog.csdnimg.cn/d5a41296ff304266ac58d57103156fc3.png" alt="框架"></p>
]]></content>
  </entry>
  <entry>
    <title>提升打字速度小技巧</title>
    <url>/posts/f8192249.html</url>
    <content><![CDATA[<h1 id="一、英文"><a href="#一、英文" class="headerlink" title="一、英文"></a>一、英文</h1><h2 id="1-删除一整个单词"><a href="#1-删除一整个单词" class="headerlink" title="1. 删除一整个单词"></a>1. 删除一整个单词</h2><p>通过Ctrl+Backspace可以实现；</p>
<p>与此同时，对于中文，我们也可以通过这种操作删除一个词。</p>
<h2 id="2-删除一整行单词"><a href="#2-删除一整行单词" class="headerlink" title="2. 删除一整行单词"></a>2. 删除一整行单词</h2><p>Shift+Home可以选中一整行，因此我们可以通过Shift+Home+Backspace完成删除一整行的操作。</p>
<h2 id="3-训练"><a href="#3-训练" class="headerlink" title="3. 训练"></a>3. 训练</h2><h3 id="（1）训练常用词"><a href="#（1）训练常用词" class="headerlink" title="（1）训练常用词"></a>（1）训练常用词</h3><p>10fastfigers.com</p>
<h3 id="（2）训练薄弱字母"><a href="#（2）训练薄弱字母" class="headerlink" title="（2）训练薄弱字母"></a>（2）训练薄弱字母</h3><p>keybr.com</p>
<h1 id="二、中文"><a href="#二、中文" class="headerlink" title="二、中文"></a>二、中文</h1><h2 id="1-偏盘部首辅助找字"><a href="#1-偏盘部首辅助找字" class="headerlink" title="1. 偏盘部首辅助找字"></a>1. 偏盘部首辅助找字</h2><p>可以在输入拼音后加上Tab键输入偏旁部首。</p>
<h2 id="2-Ctrl-首字母可以快速定位到该字母前方"><a href="#2-Ctrl-首字母可以快速定位到该字母前方" class="headerlink" title="2. Ctrl+首字母可以快速定位到该字母前方"></a>2. Ctrl+首字母可以快速定位到该字母前方</h2><h2 id="3-启用u模式，通过偏旁部首组成生僻字"><a href="#3-启用u模式，通过偏旁部首组成生僻字" class="headerlink" title="3. 启用u模式，通过偏旁部首组成生僻字"></a>3. 启用u模式，通过偏旁部首组成生僻字</h2><h2 id="4-启用v模式，可以方便数字的使用和计算"><a href="#4-启用v模式，可以方便数字的使用和计算" class="headerlink" title="4. 启用v模式，可以方便数字的使用和计算"></a>4. 启用v模式，可以方便数字的使用和计算</h2><p>如v123可以快速输入繁体</p>
<h2 id="5-简拼"><a href="#5-简拼" class="headerlink" title="5. 简拼"></a>5. 简拼</h2><p>rq 输入今天的日期</p>
<p>sq 输入现在星期几</p>
<p>sj 输入现在时间点</p>
<h2 id="6-固定首位"><a href="#6-固定首位" class="headerlink" title="6. 固定首位"></a>6. 固定首位</h2><h2 id="7-自定义快捷短语"><a href="#7-自定义快捷短语" class="headerlink" title="7. 自定义快捷短语"></a>7. 自定义快捷短语</h2><p>比如可以让字母输出标点符号</p>
<h2 id="8-美化输入法皮肤，提升效率"><a href="#8-美化输入法皮肤，提升效率" class="headerlink" title="8. 美化输入法皮肤，提升效率"></a>8. 美化输入法皮肤，提升效率</h2>]]></content>
  </entry>
  <entry>
    <title>配置Mysql与注册登录模块</title>
    <url>/posts/94f24848.html</url>
    <content><![CDATA[<h1 id="整个框架的模型"><a href="#整个框架的模型" class="headerlink" title="整个框架的模型"></a>整个框架的模型</h1><p><img src="https://img-blog.csdnimg.cn/6a56f158dee94d3d90ac4970cec26768.png" alt="整个框架的模型"></p>
<img src="https://img-blog.csdnimg.cn/6a56f158dee94d3d90ac4970cec26768.png" referrerpolicy="no-referrer">

<p>工程就是对字符串的处理。</p>
<h1 id="MySQL的安装与使用"><a href="#MySQL的安装与使用" class="headerlink" title="MySQL的安装与使用"></a>MySQL的安装与使用</h1><p>软件默认储存在了C盘的Program Files，数据储存在了Program Data。<br> cd “C:\Program Files\MySQL\MySQL Server 8.0\bin”  进入之后运行Mysql的命令mysql –version。<br> 配置Path环境变量：我的电脑-属性-高级-环境变量-Path（上面的是当前用户，下面的是所有用户都能访问）-新建-将bin放进去-之后就可以在各个情况下使用mysql 。<br> 注意：如果电脑上有多个mysql的版本需要在配置环境变量时将需要显示的那个的bin目录上移。<br> 用管理员权限运行powershell后输入net stop mysql80就可以停止，输入net start mysql80启动服务。</p>
<h2 id="登录自己的mysql"><a href="#登录自己的mysql" class="headerlink" title="登录自己的mysql"></a>登录自己的mysql</h2><p>mysql -uroot -P端口号 -p密码 </p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p> show databases;<br>create databases 名称;<br>use 名称; 使用数据库<br>drop 名称; 删除数据库</p>
<p>show tables; 显示表<br>create table 名称（属性1 类型1,）； –常见的属性有id，用户名，密码；varchar需要在括号中加上长度<br>drop table 名称; 删除表</p>
<p>insert into 名称 values(，‘’,‘’); –在想插入的表中插入数据<br>select * from 名称; 查询数据<br>select * from 名称 where 条件； 查询单个<br>delete from 名称 where 条件; 删除</p>
<p>键盘上的上下方向键可以试试</p>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>打开Idea，选择连接数据库，点击移出可以删除已有数据库，其中数据库填自己创建的，组建选择默认组建。<br>测试连接成功后就可以在Idea中修改数据，其中点击+可以增加表中的数据，点击向上的箭头可以上传数据，点击刷新可以更新数据。<br>点击新建列可以增加一列。</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在<a href="https://mvnrepository.com/%EF%BC%88maven%E4%BB%93%E5%BA%93%EF%BC%89%E4%B8%AD%E6%90%9C%E7%B4%A2%E6%89%80%E9%9C%80%EF%BC%8C%E6%B7%BB%E5%8A%A0%E5%88%B0pom.xml%E7%9A%84%60">https://mvnrepository.com/（maven仓库）中搜索所需，添加到pom.xml的`</a><dependency>`中，之后点击最右侧的Maven选择刷新。</dependency></p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&lt;dependency&gt; 
           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
           &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;
           &lt;version&gt;2.7.1&lt;/version&gt;
       &lt;/dependency&gt;

       &lt;dependency&gt;
           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
           &lt;artifactId&gt;lombok&lt;/artifactId&gt;
           &lt;version&gt;1.18.24&lt;/version&gt;
           &lt;scope&gt;provided&lt;/scope&gt;
       &lt;/dependency&gt;

       &lt;dependency&gt;
           &lt;groupId&gt;mysql&lt;/groupId&gt;
           &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
           &lt;version&gt;8.0.29&lt;/version&gt;
       &lt;/dependency&gt;

       &lt;dependency&gt;
           &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
           &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;
           &lt;version&gt;3.5.3&lt;/version&gt;
       &lt;/dependency&gt;


       &lt;dependency&gt;
           &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
           &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
           &lt;version&gt;3.5.2&lt;/version&gt;
       &lt;/dependency&gt;

       &lt;dependency&gt;
           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
           &lt;version&gt;2.7.1&lt;/version&gt;
       &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="application-propeties"><a href="#application-propeties" class="headerlink" title="application.propeties"></a>application.propeties</h3><p>在application.properities中添加<br>serve.port=3000</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.url=jdbc:mysql://localhost:3306/kob?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="解决空的中间软件包被自动压缩的问题"><a href="#解决空的中间软件包被自动压缩的问题" class="headerlink" title="解决空的中间软件包被自动压缩的问题"></a>解决空的中间软件包被自动压缩的问题</h1><p>点击设置-树外观，关闭压缩空的中间软件包。</p>
<h1 id="SpringBoot中常用文件夹概念"><a href="#SpringBoot中常用文件夹概念" class="headerlink" title="SpringBoot中常用文件夹概念"></a>SpringBoot中常用文件夹概念</h1><h2 id="pojo层"><a href="#pojo层" class="headerlink" title="pojo层"></a>pojo层</h2><h3 id="将数据库中的table直接翻译成Java中的class"><a href="#将数据库中的table直接翻译成Java中的class" class="headerlink" title="将数据库中的table直接翻译成Java中的class"></a>将数据库中的table直接翻译成Java中的class</h3><p>在pojo中加入User这个类<br><img src="https://img-blog.csdnimg.cn/05454a8f091b4b8b8bf877a551d2d7bc.png" alt="pojo"></p>
<h2 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h2><h3 id="将class里的增删改查（crud）转换成sql语句"><a href="#将class里的增删改查（crud）转换成sql语句" class="headerlink" title="将class里的增删改查（crud）转换成sql语句"></a>将class里的增删改查（crud）转换成sql语句</h3><p>在mapper中添加类UserMapper，我们通过使用MyBatis-plus可以避免使用sql语句。<br><img src="https://img-blog.csdnimg.cn/9e7016d4bf5643a3aa20152ca1e7785b.png" alt="mapper"></p>
<h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><p>实现具体业务。</p>
<h2 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h2><p>调度service层。<br><img src="https://img-blog.csdnimg.cn/bbcf432642564fc4a6419a414ff7ab18.png" alt="用到数据库的Maaper"><br><img src="https://img-blog.csdnimg.cn/9cca177980ed4f308b702216efc16041.png" alt="返回用户的所有"><br>最后的是返回查询所有用户。<img src="https://img-blog.csdnimg.cn/0b7235244d8b4cc99800bd6adf9695bd.png" alt="MyBatis-Plus"><br>在MyBatis-Plus官网中我们可以查询到返回所有用户。<br>封装条件构造器QueryWrapper，可以调用api。<br><img src="https://img-blog.csdnimg.cn/83466279a6f441e78f1b1c5182693cf2.png" alt="查询某一个用户id"></p>
<h4 id="实现范围遍历"><a href="#实现范围遍历" class="headerlink" title="实现范围遍历"></a>实现范围遍历</h4><p>ge是大于等于，le是小于等于;gt是大于，lt是等于。<br><img src="https://img-blog.csdnimg.cn/d9ba4eb9170a42ae9c689d7f9a0b4ab5.png" alt="在这里插入图片描述"><br>如上图是一个错误的示范，只返回了一个，然而这个范围却不止一个。<br>正确的如下：（将One改为List）<br><img src="https://img-blog.csdnimg.cn/96fadb72126d4532b66fc79b16997d73.png" alt="在这里插入图片描述"></p>
<h4 id="插入一条数据"><a href="#插入一条数据" class="headerlink" title="插入一条数据"></a>插入一条数据</h4><p>通过post实现如下<br><img src="https://img-blog.csdnimg.cn/0e6ec579f3be49f5ab9bedfaf4671b8b.png" alt="插入数据"><br>(@PathVariable是spring3.0的一个新功能：接收请求路径中占位符的值)</p>
<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p><img src="https://img-blog.csdnimg.cn/744ee2ad8093401ea12e38fdad813f53.png" alt="删除数据"></p>
<h3 id="userController"><a href="#userController" class="headerlink" title="userController"></a>userController</h3><p>其中@RequestMapping可以映射所有的，除此之外还有@GetMapping和@PostMapping。</p>
<h1 id="target中就是编译完后的结果"><a href="#target中就是编译完后的结果" class="headerlink" title="target中就是编译完后的结果"></a>target中就是编译完后的结果</h1><h1 id="配置授权机制（用户安全）"><a href="#配置授权机制（用户安全）" class="headerlink" title="配置授权机制（用户安全）"></a>配置授权机制（用户安全）</h1><p>在Maven仓库中添加完相关依赖后，再次打开原来的页面会显示一个登陆窗口:<br><img src="https://img-blog.csdnimg.cn/f0b479b69f2842b3aaa7b3b6b846f775.png" alt="登陆"><br>默认用户名是user，密码会每次编译后自动生成<br><img src="https://img-blog.csdnimg.cn/50e5328e66be4a9ba693b51dbf1c3a76.png" alt="password"><br>/logout是退出页面<br><img src="https://img-blog.csdnimg.cn/c253ebf29d4e4cd8b120d25de2d04473.png" alt="退出页面"></p>
<h2 id="不再使用默认登陆"><a href="#不再使用默认登陆" class="headerlink" title="不再使用默认登陆"></a>不再使用默认登陆</h2><h3 id="键盘上的alt-insert键可以快速插入"><a href="#键盘上的alt-insert键可以快速插入" class="headerlink" title="键盘上的alt+insert键可以快速插入"></a>键盘上的alt+insert键可以快速插入</h3><p><img src="https://img-blog.csdnimg.cn/13376c98df7a4f8dae282250e9ad8598.png" alt="自动生成方法"></p>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p><img src="https://img-blog.csdnimg.cn/c245ed2667074805a925da3e1e310abb.png" alt="session"><br>数据库里会存sessionID是谁。<br><img src="https://img-blog.csdnimg.cn/a36799fc192c45518a5fa0cb6bf3bded.png" alt="在这里插入图片描述"><br>如果使用数据库一定要加上Autowired<br><img src="https://img-blog.csdnimg.cn/646d4747e26e4de9b11c05a2bf728987.png" alt="在这里插入图片描述"><br>在密码前加上{noop}让数据库知道并未加密</p>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p><img src="https://img-blog.csdnimg.cn/288f2b5ca9064214b647e791ecc56420.png" alt="加密"><br>encode 将明文转化为密文<br>matches 判断明文与密文是否匹配<br><img src="https://img-blog.csdnimg.cn/780c23535d7f4f91a5d2942eb1b870e7.png" alt="在这里插入图片描述"><br>我们在test类中进行加密，加密后的密文会出现在这里<br><img src="https://img-blog.csdnimg.cn/9c875952a4104520aabf7453e4d69604.png" alt="密文"></p>
<p>接下来我们可以通过matches判断是否匹配<img src="https://img-blog.csdnimg.cn/8fb5b98e953d4d85a82bf346bafa8b4f.png" alt="在这里插入图片描述"><br>如果在这里显示true就是匹配，false就是不匹配。<br><img src="https://img-blog.csdnimg.cn/2e5594fa24174480adb94eb09ddda0d1.png" alt="在这里插入图片描述"><br>这个时候，我们再回到登陆页面只能通过密文进行登陆。为了解决这种问题，我们可以将数据库中的password改为对应的密文。<br>之后我们设置自动生成密文<br>……</p>
]]></content>
  </entry>
  <entry>
    <title>开启游戏平台</title>
    <url>/posts/8ae62c4e.html</url>
    <content><![CDATA[<p>选择依赖项 ： SpringWeb、Thymeleaf</p>
<p>127.0.0.1:8080(<a href="http://localhost:8080/">http://localhost:8080/</a>)</p>
<p>在后端中新建一个软件包：controller</p>
<p>在IndexController加一个注解@Controller</p>
<p>加一个父目录@RequestMapping</p>
<p>注意加上/,网站是<a href="http://127.0.0.1:8080/pk/index/">http://127.0.0.1:8080/pk/index/</a></p>
<p>在resources的</p>
<p>在static里存Image</p>
<p>以上是前后端不分离的写法，返回的是html页面</p>
<p>如果前后端分离，返回的是一个类</p>
<h2 id="后端分离的写法"><a href="#后端分离的写法" class="headerlink" title="后端分离的写法"></a>后端分离的写法</h2><p>增加一个映射@RequestMapping</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBotInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tiger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBotInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"rating"</span><span class="token punctuation">,</span><span class="token string">"1500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(注意方法的返回)</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBotInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bot1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bot1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bot1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"rating"</span><span class="token punctuation">,</span><span class="token string">"1500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bot2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bot2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bot2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"rating"</span><span class="token punctuation">,</span><span class="token string">"1800"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bot1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bot2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>vue ui </p>
<p>之后安装两个插件和两个依赖（jqueiry和bootstrap）</p>
<p>任务 —&gt; serve —&gt; 运行</p>
<h3 id="去掉"><a href="#去掉" class="headerlink" title="去掉#"></a>去掉#</h3><p>在router的Index里将Hash几个字去掉</p>
<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><p>每一个vue都有三个：<templete>(html) <script>（js） <style>（css）</p>
<p>type类型 get和post,</p>
<p>图片下载路径D:\kob\web\src\assets</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>template<span class="token punctuation">></span></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>div<span class="token punctuation">></span></span>
      <span class="token generics"><span class="token punctuation">&lt;</span>div<span class="token punctuation">></span></span><span class="token class-name">Bot</span>昵称<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>bot_name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token generics"><span class="token punctuation">&lt;</span>div<span class="token punctuation">></span></span><span class="token class-name">Bot</span>战力<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>bot_rating<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token generics"><span class="token punctuation">&lt;</span>script<span class="token punctuation">></span></span>
<span class="token keyword">import</span> $ from <span class="token string">'jquery'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> from <span class="token string">'vue'</span><span class="token punctuation">;</span>

export <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"APP"</span><span class="token punctuation">,</span>
  setup<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">&#123;</span>
      let bot_name <span class="token operator">=</span>  <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      let bot_rating <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        url<span class="token operator">:</span> <span class="token string">"http://127.0.0.1:8080/pk/getbotinfo/"</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>
        success<span class="token operator">:</span>resp<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">&#123;</span>
          bot_name<span class="token punctuation">.</span>value <span class="token operator">=</span> resp<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
          bot_rating<span class="token punctuation">.</span>value <span class="token operator">=</span> resp<span class="token punctuation">.</span>rating<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        bot_name<span class="token punctuation">,</span>
        bot_rating
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token generics"><span class="token punctuation">&lt;</span>style<span class="token punctuation">></span></span>
body <span class="token punctuation">&#123;</span>
  background<span class="token operator">-</span>image<span class="token operator">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"@/assets/background.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  background<span class="token operator">-</span>size<span class="token operator">:</span> cover
<span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在BootStrap中的NavBar找到喜欢的样式</p>
<p>light-dark互相修改</p>
<p>通过active控制聚焦</p>
<h2 id="需要的页面"><a href="#需要的页面" class="headerlink" title="需要的页面"></a>需要的页面</h2><p>1.PK </p>
<p>2.Record</p>
<p>3.Ranklist</p>
<p>4.User Bot</p>
<p>5.404</p>
<p>防止跳转时刷新，将<a class>换成<router-link class></p>
<p>公共的组建</p>
<p>container是一个自适应大小的容器</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">div.container>div.card>div.card-body<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>user 多一层目录，所以是 from ‘../../../components/ContentField.vue’</p>
<h2 id="显示聚焦"><a href="#显示聚焦" class="headerlink" title="显示聚焦"></a>显示聚焦</h2><p>首先需要取得当前是什么页面</p>
<p>选中一个地方后按alt键就会有两个光标一块写了</p>
<p>冒号是v-bind的简写</p>
<h2 id="设计这个游戏"><a href="#设计这个游戏" class="headerlink" title="设计这个游戏"></a>设计这个游戏</h2><h2 id="import是否需要用到大括号"><a href="#import是否需要用到大括号" class="headerlink" title="import是否需要用到大括号"></a>import是否需要用到大括号</h2><p>有default不用加大括号（export相当于java中的public）</p>
</script></templete></p>]]></content>
  </entry>
  <entry>
    <title>markdown常用语法</title>
    <url>/posts/dc49ce92.html</url>
    <content><![CDATA[<h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，两个#是二级标题，以此类推。支持六级标题，标题字号逐级递减降低<br><strong>注：标准语法在#后跟个空格再写文字<br>示例：</strong></p>
<pre class="line-numbers language-none"><code class="language-none"># 这是一级标题
## 这是二级标题
### 这是三级标题
#### 这是四级标题
##### 这是五级标题
###### 这是六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>效果如下</strong></p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h2 id="2-字号"><a href="#2-字号" class="headerlink" title="2.字号"></a>2.字号</h2><p>加粗<br>要加粗的文字左右分别用两个 * 号包起来<br>斜体<br>要倾斜的文字左右分别用一个 * 号包起来<br>斜体加粗<br>要倾斜和加粗的文字左右分别用三个 * 号包起来<br>删除线<br>要加删除线的文字左右分别用两个~~号包起来</p>
<p><strong>示例</strong></p>
<pre class="line-numbers language-none"><code class="language-none">**这是加粗的文字**
*这是倾斜的文字*
***这是斜体加粗的文字***
~~这是加删除线的文字~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>效果如下：</strong><br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p>
<h2 id="3-分割线"><a href="#3-分割线" class="headerlink" title="3.分割线"></a>3.分割线</h2><p>三个或者三个以上的-或者*都可以<br><strong>示例：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">---
***<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h2><hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在需要引用的文字前加&gt;即可<br><strong>示例</strong></p>
<pre class="line-numbers language-none"><code class="language-none">&gt;这是需要引用的文字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>这是需要引用的文字</p>
</blockquote>
<h2 id="5-图片"><a href="#5-图片" class="headerlink" title="5.图片"></a>5.图片</h2><pre class="line-numbers language-none"><code class="language-none">![图片下方显示名字](图片url “鼠标放在图片上的显示信息”)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/485e7ccfcc3a41098b60155416ef472a.png#pic_center" alt="易剪剪logo" title="这是logo"></p>
<h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h2><p><strong>无序列表</strong><br>在内容前面加上*，+，或者-（注意空格）</p>
<pre class="line-numbers language-none"><code class="language-none">* 无序列表
+ 无序列表
- 无序列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>有序列表</strong><br>数字加上.（后面还是要空格）</p>
<pre class="line-numbers language-none"><code class="language-none">1. 有序列表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>有序列表</li>
</ol>
<h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h2><table>
<thead>
<tr>
<th align="left">表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td align="left">内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
<tr>
<td align="left">内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
</tbody></table>
<p>第二行分割表头和内容。</p>
<pre class="line-numbers language-none"><code class="language-none">- 有一个就行
-左边加：表示文字居左
-两边加：表示文字居中
-右边加：表示文字居右
注：原生的语法两边都要用 | 包起来。此处省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>示例：</strong><br>学号|姓名|年龄<br>:-|:-:|-:<br>123|456|789</p>
<h2 id="9-代码插入"><a href="#9-代码插入" class="headerlink" title="9. 代码插入"></a>9. 代码插入</h2><p>单行代码</p>
<blockquote>
<p><code>单行代码</code></p>
</blockquote>
<p>多行代码</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">多行代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<h2 id="10-插入视频或音乐"><a href="#10-插入视频或音乐" class="headerlink" title="10.插入视频或音乐"></a>10.插入视频或音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1385240480&amp;auto=0&amp;height=66"></iframe>

<h2 id="11-文字"><a href="#11-文字" class="headerlink" title="11.文字"></a>11.文字</h2><h3 id="（1）缩进"><a href="#（1）缩进" class="headerlink" title="（1）缩进"></a>（1）缩进</h3><p>在缩进前的文字使用 <code>&amp;emsp;</code><br><strong>示例</strong><br> 我被缩进啦</p>
<h3 id="（2）居中"><a href="#（2）居中" class="headerlink" title="（2）居中"></a>（2）居中</h3><p>markdown支持html语法，因此可以用<code>&lt;center&gt; &lt;/center&gt;</code>实现居中，</p>
<center>居中啦</center>

<h3 id="（3）字体和颜色"><a href="#（3）字体和颜色" class="headerlink" title="（3）字体和颜色"></a>（3）字体和颜色</h3><p>font face 字体<br>font size  大小<br>font color 颜色<br>以上可以嵌套使用<br><font color="blued">你好</font></p>
<h2 id="12-图片大小和位置"><a href="#12-图片大小和位置" class="headerlink" title="12.图片大小和位置"></a>12.图片大小和位置</h2><p>众所周知，html语法很简单，md也支持。</p>
<p>通过 center 居中 ，把center换成 left 和 right 可以实现居左或者居右<br>width 和 height 调控高度和宽度</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://img-blog.csdnimg.cn/20200507103002365.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> 30%</span> <span class="token attr-name">height</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> 20%</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>配置git环境与项目创建</title>
    <url>/posts/881ff15a.html</url>
    <content><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>首先进入终端,输入cd进入家目录。通过ssh-keygen生成密钥，一路回车。</p>
<p>cd .ssh 进入ssh文件夹，输入ls，可以看到两个文件：公钥和私钥。通过cat + 私钥名称就可以点开。将密钥复制至ssh密钥后传到acgit。</p>
<p>在电脑上创建个目录后输入命令git init，会生成一个隐藏文件夹 .git,同时在其中创建一个readme文件</p>
<h2 id="输入常用的git命令-（git-含义）"><a href="#输入常用的git命令-（git-含义）" class="headerlink" title="输入常用的git命令 （git + 含义）"></a>输入常用的git命令 （git + 含义）</h2><p>git status 查看当前文件夹下有多少文件未被收录到仓库</p>
<p>git add . 将未收录的给收录了</p>
<p>git commit -m “创建项目（命名）”   为这段有纪念价值的命令取个亲切的名字吧~之后可以通过历史查看，同时也可以在其中浏览文件获取历史版本</p>
<ul>
<li><p>git push 上传云端（执行此命令前需要同步）</p>
</li>
<li><p>git pull 将另一台电脑的代码给同步下来</p>
</li>
</ul>
<h2 id="同步云端项目"><a href="#同步云端项目" class="headerlink" title="同步云端项目"></a>同步云端项目</h2><p>创建项目–创建空白项目–………–将命令复制粘贴(可以用shift+insert键)（如果有多个项目，两个都要去掉–global）–推送现有文件夹（选第三个和第五个（将main换成master））</p>
<h2 id="如何将两个电脑代码同步"><a href="#如何将两个电脑代码同步" class="headerlink" title="* 如何将两个电脑代码同步"></a>* 如何将两个电脑代码同步</h2><p>进入项目后点击克隆，复制ssh克隆命令，打开需要克隆的文件夹，输入git命令git clone + 复制</p>
]]></content>
  </entry>
  <entry>
    <title>开启SpringBoot的入门学习</title>
    <url>/posts/33b430d3.html</url>
    <content><![CDATA[<h3 id="还在学习中，我会在期末考试完成后一直更新的。"><a href="#还在学习中，我会在期末考试完成后一直更新的。" class="headerlink" title="还在学习中，我会在期末考试完成后一直更新的。"></a>还在学习中，我会在期末考试完成后一直更新的。</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>个人学习</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>开启VUE的学习记录</title>
    <url>/posts/708b490e.html</url>
    <content><![CDATA[<h3 id="还在学习中，我会在期末考试完成后一直更新的。"><a href="#还在学习中，我会在期末考试完成后一直更新的。" class="headerlink" title="还在学习中，我会在期末考试完成后一直更新的。"></a>还在学习中，我会在期末考试完成后一直更新的。</h3><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><h4 id="v-on-1"><a href="#v-on-1" class="headerlink" title="v-on"></a>v-on</h4><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4>]]></content>
      <categories>
        <category>个人学习</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>STL的个人总结</title>
    <url>/posts/d87f7e0c.html</url>
    <content><![CDATA[<h1 id="algorithm库函数"><a href="#algorithm库函数" class="headerlink" title="algorithm库函数"></a>algorithm库函数</h1><h3 id="1-reverse-翻转"><a href="#1-reverse-翻转" class="headerlink" title="1.reverse 翻转"></a>1.reverse 翻转</h3><p>(a.begin(),a.end())  reverse(a,a+n) </p>
<p> <em>举个栗子</em></p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
using namespace std;
int main()
{
    vector&lt;int&gt;a({1,2,3,4,5});
    reverse(a.begin(),a.end());
    for(auto x:a) cout &lt;&lt; x &lt;&lt;' ';
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-unique-去重"><a href="#2-unique-去重" class="headerlink" title="2.unique 去重"></a>2.unique 去重</h3><p> <u>需要保证相同元素在一起才行，个人建议先sort </u><br>m=unique(begin,end)-begin //m为不重复的个数<br>或者a.erase(unique(begin,end),end)<br><em>举个栗子</em></p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
using namespace std;
int main()
{
    vector&lt;int&gt;a({1,2,2,3,3,4,4,4});//vector赋初值时不要等号
    int m=unique(a.begin(),a.end())-a.begin();
    cout &lt;&lt; m &lt;&lt;endl;
    for(int i=0;i&lt;m;i++) cout &lt;&lt; a[i]&lt;&lt;' ';
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
using namespace std;
int main()
{
    vector&lt;int&gt;a({1,2,2,3,3,4,4,4});//vector赋初值时不要等号
    a.erase(unique(a.begin(),a.end()),a.end());
    for(auto x:a) cout &lt;&lt; x &lt;&lt;' ';
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-random-shuffle-随机打乱"><a href="#3-random-shuffle-随机打乱" class="headerlink" title="3.random_shuffle 随机打乱"></a>3.random_shuffle 随机打乱</h3><p>用法同reverse<br>注：可通过更改随机种子，让随机数变得不同</p>
<pre class="line-numbers language-none"><code class="language-none">include &lt;ctime&gt;
scand(time(0));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="4-sort-排序"><a href="#4-sort-排序" class="headerlink" title="4.sort 排序"></a>4.sort 排序</h3><p>默认从小到大排序<br>如果需要从大到小排序，那么可以加个<code>greater&lt;int&gt;()</code> 或者自写cmp函数<br><em>举个栗子</em></p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
using namespace std;
int main()
{
    vector&lt;int&gt;a({1,3,2,5,2});
    sort(a.begin(),a.end(),greater&lt;int&gt;());
    for(auto x:a) cout &lt;&lt; x &lt;&lt;' ';
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="给结构体排序："><a href="#给结构体排序：" class="headerlink" title="给结构体排序："></a>给结构体排序：</h4><p>1.重载小于号</p>
<pre class="line-numbers language-none"><code class="language-none">struct Rec
{
    int x,y;
    bool operator&lt;(const Rec &amp;t)const
    {
        return x&lt;t.x;//t是什么?例如a[0]与a[1]比较,t就是a[1]
    }a[N];
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.cmp函数</p>
<pre class="line-numbers language-none"><code class="language-none">bool cmp(Rec a, Rec b)
{
    return a.x &lt; b.x;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-lower-bound-upper-bound-二分，区别在于后者无等于"><a href="#5-lower-bound-upper-bound-二分，区别在于后者无等于" class="headerlink" title="5.lower_bound/upper_bound 二分，区别在于后者无等于"></a>5.lower_bound/upper_bound 二分，区别在于后者无等于</h3><p><code>int *p=lower_bound(begin,end,a);//*p为大于等于a的第一个元素</code><br><code>int t=lower_bound(begin,end,a)-begin;//*p为大于等于a的第一个元素的下标</code></p>
<p>其它注意：queue不能随机遍历</p>
<h3 id="最后：部分例题"><a href="#最后：部分例题" class="headerlink" title="最后：部分例题"></a>最后：部分例题</h3><p><code>68. 0到n-1中缺失的数字</code></p>
<pre class="line-numbers language-none"><code class="language-none">class Solution {
public:
    int getMissingNumber(vector&lt;int&gt;&amp; nums) {
        unordered_set&lt;int&gt; S;
        //将所有可能的数字都放进哈希表
        for(int i=0;i&lt;=nums.size();i++) S.insert(i);
        //将已有的删掉，剩下的那个数字就是需要补充的
        for(auto x:nums) S.erase(x);
        return *S.begin();
    }
};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>32. 调整数组顺序使奇数位于偶数前面</code></p>
<pre class="line-numbers language-none"><code class="language-none">class Solution {
public:
    void reOrderArray(vector&lt;int&gt; &amp;array) {
/*思路：让i指针遍历的都为奇数，j指针遍历的都为偶数
i:若为奇数那么就一直往后走;j:若为偶数那么就一直往前走
当两个奇数都不能走的时候就说明i指向偶数，j指向奇数，此时交换两个指针
这个过程一直到i与j相遇或者错开时停下
*/
        int i = 0, j = array.size() - 1;
        while(i &lt; j)
        {
            while(i &lt; j &amp;&amp; array[i] % 2) i++;
            while(i &lt; j &amp;&amp; array[j] % 2 == 0) j--;
            if(i &lt; j) swap(array[i], array[j]);
        }
    }
};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>17. 从尾到头打印链表</code></p>
<pre class="line-numbers language-none"><code class="language-none">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    vector&lt;int&gt; printListReversingly(ListNode* head) {
        vector&lt;int&gt;res;
        for(auto p = head; p; p = p-&gt;next) res.push_back(p-&gt;val);
        reverse(res.begin(), res.end());
        return res;
    }
};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>20. 用两个栈实现队列</code></p>
<pre class="line-numbers language-none"><code class="language-none">/*例如搬书，自己手上有几十本书，需要将最底下那本抽出来。
于是，我们可以找个工具人，将除了最底下的那本都一本一本甩给他。
最后抽出那本书后，再让他把他手上的书按顺序给我。
*/
class MyQueue {
public:
    /** Initialize your data structure here. */
    stack&lt;int&gt; s1, s2;

    MyQueue() {

    }

    /** Push element x to the back of queue. */
    void push(int x) {
        s1.push(x);
    }

    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        while(s1.size()&gt;1) s2.push(s1.top()),s1.pop();//把书都甩给工具人，自己只拿一本书
        int t = s1.top();
        s1.pop();
        while(s2.size()) s1.push(s2.top()),s2.pop();//那本书被取出来了，让工具人把书还给我，不需要他了，赶他下线
        return t;
    }

    /** Get the front element. */
    int peek() {
        while(s1.size()&gt;1) s2.push(s1.top()),s1.pop();//把书都甩给工具人，自己只拿一本书
        int t = s1.top();
        while(s2.size()) s1.push(s2.top()),s2.pop();//那本书被取出来了，让工具人把书还给我，不需要他了，赶他下线
        return t;
    }

    /** Returns whether the queue is empty. */
    bool empty() {
        return s1.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>53. 最小的k个数</code></p>
<pre class="line-numbers language-none"><code class="language-none">class Solution {
public:
    vector&lt;int&gt; getLeastNumbers_Solution(vector&lt;int&gt; input, int k) {
        sort(input.begin(), input.end());
        vector&lt;int&gt;res;
        for (int i = 0; i &lt; k; i ++ ) res.push_back(input[i]);
        return res;
    }
};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>75. 和为S的两个数字</code></p>
<pre class="line-numbers language-none"><code class="language-none">/*在哈希表查看有没有可以凑成一对的那个数字*/
class Solution {
public:
    vector&lt;int&gt; findNumbersWithSum(vector&lt;int&gt;&amp; nums, int target) {
        unordered_set&lt;int&gt;S;
        for(auto x:nums)
        {
            if(S.count(target-x)) return {x,target-x};//用count函数
            S.insert(x);
        }
    }
};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>51. 数字排列</code></p>
<pre class="line-numbers language-none"><code class="language-none">class Solution {
public:
    vector&lt;vector&lt;int&gt;&gt; permutation(vector&lt;int&gt;&amp; nums) {
        //先排序之后才能使用next_permutation(begin,end)
        sort(nums.begin(),nums.end());
        vector&lt;vector&lt;int&gt;&gt;res;
        do{
            res.push_back(nums);
        }while(next_permutation(nums.begin(),nums.end()));
        return res;
    }
};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>26. 二进制中1的个数</code></p>
<pre class="line-numbers language-none"><code class="language-none">class Solution {
public:
    int NumberOf1(int n) {
        int res = 0;
        for (int i = 0; i &lt; 32; i++)
            if (n &gt;&gt; i &amp; 1)
                res++;
    return res;
    }
};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>862. 三元组排序</code></p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;
const int N = 10010;
struct Data
{
  int x;
  double y;
  string z;

  bool operator&lt; (const Data &amp;t) const
  {
      return x &lt; t.x;
  }
}a[N];
int main()
{
    int n;
    cin &gt;&gt; n;
    for (int i = 0; i &lt; n; i ++ ) cin &gt;&gt; a[i].x &gt;&gt;a[i].y &gt;&gt; a[i].z;
    sort(a, a+n);
    //printf输出字符串需要加.c_str())
    for (int i = 0; i &lt; n; i ++ ) printf("%d %.2lf %s\n",a[i].x,a[i].y,a[i].z.c_str());
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
</search>
